"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var react_transition_group_1 = require("react-transition-group");
var useCollapsible_1 = __importDefault(require("../useCollapsible"));
var CollapsibleToggler = function (props) {
    var id = props.id, className = props.className, style = props.style, _a = props.htmlElement, htmlElement = _a === void 0 ? 'button' : _a, _b = props.htmlAttributes, htmlAttributes = _b === void 0 ? {} : _b, disable = props.disable, children = props.children;
    var _c = useCollapsible_1.default(), rootClass = _c.rootClass, handleClick = _c.handleClick, isOpen = _c.isOpen, transTime = _c.transTime;
    var baseClass = rootClass + "__toggler";
    var mergedClasses = [
        baseClass,
        isOpen && baseClass + "--is-open",
        disable && baseClass + "--is-disabled",
        className,
    ].filter(Boolean).join(' ');
    var mergedAttributes = __assign(__assign({}, htmlAttributes), { onClick: function () {
            if (!disable)
                handleClick();
            if (typeof htmlAttributes.onClick === 'function')
                htmlAttributes.onClick();
        } });
    var Tag = htmlElement;
    return (react_1.default.createElement(react_transition_group_1.CSSTransition, { timeout: transTime, in: isOpen, classNames: {
            appear: baseClass + "--appear",
            appearActive: baseClass + "--appearActive",
            appearDone: baseClass + "--appearDone",
            enter: baseClass + "--enter",
            enterActive: baseClass + "--enterActive",
            enterDone: baseClass + "--enterDone",
            exit: baseClass + "--exit",
            exitActive: baseClass + "--exitActive",
            exitDone: baseClass + "--exitDone",
        } },
        react_1.default.createElement(Tag, __assign({}, __assign({ id: id, className: mergedClasses, style: style }, mergedAttributes)), children && children)));
};
exports.default = CollapsibleToggler;
//# sourceMappingURL=index.js.map