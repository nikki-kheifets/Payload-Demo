"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSettings = void 0;
var react_1 = __importStar(require("react"));
var window_info_1 = require("@faceless-ui/window-info");
var Context = react_1.createContext({
    colGap: '10px',
    rowGap: '10px',
    cols: 12,
});
var useSettings = function () { return react_1.useContext(Context); };
exports.useSettings = useSettings;
var SettingsProvider = function (props) {
    var children = props.children, cols = props.cols, colGap = props.colGap, rowGap = props.rowGap;
    var breakpoints = window_info_1.useWindowInfo().breakpoints;
    var smallestBreakpointReached = 'xl';
    if (breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.l)
        smallestBreakpointReached = 'l';
    if (breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.m)
        smallestBreakpointReached = 'm';
    if (breakpoints === null || breakpoints === void 0 ? void 0 : breakpoints.s)
        smallestBreakpointReached = 's';
    var maxColumns = cols[smallestBreakpointReached];
    var activeColumnGap = colGap[smallestBreakpointReached];
    var activeRowGap = rowGap[smallestBreakpointReached];
    var value = {
        cols: maxColumns,
        rowGap: activeRowGap,
        colGap: activeColumnGap,
        smallestBreakpointReached: smallestBreakpointReached,
    };
    return (react_1.default.createElement(Context.Provider, { value: value }, children));
};
exports.default = SettingsProvider;
//# sourceMappingURL=index.js.map