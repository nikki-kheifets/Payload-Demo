"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var withModal_1 = __importDefault(require("../withModal"));
var ModalToggler = function (props) {
    var id = props.id, className = props.className, _a = props.modal, currentModal = _a.currentModal, toggle = _a.toggle, classPrefix = _a.classPrefix, slug = props.slug, _b = props.style, style = _b === void 0 ? {} : _b, _c = props.htmlElement, htmlElement = _c === void 0 ? 'button' : _c, _d = props.htmlAttributes, htmlAttributes = _d === void 0 ? {} : _d, children = props.children;
    var baseClass = classPrefix + "__modal-toggler";
    var isOpen = currentModal === slug;
    var mergedClasses = [
        baseClass,
        baseClass + "--slug-" + slug,
        isOpen && baseClass + "--slug-" + slug + "--is-open",
        className,
    ].filter(Boolean).join(' ');
    var mergedAttributes = __assign(__assign({ role: 'button', 'aria-expanded': isOpen ? 'true' : 'false', 'aria-controls': slug }, htmlAttributes), { onClick: function () {
            toggle(slug);
            if (typeof htmlAttributes.onClick === 'function')
                htmlAttributes.onClick();
        } });
    var Tag = htmlElement;
    return (react_1.default.createElement(Tag, __assign({}, __assign({ id: id, className: mergedClasses, style: style }, mergedAttributes)), children && children));
};
exports.default = withModal_1.default(ModalToggler);
//# sourceMappingURL=index.js.map