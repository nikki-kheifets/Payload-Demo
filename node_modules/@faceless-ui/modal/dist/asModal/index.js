"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_dom_1 = __importDefault(require("react-dom"));
var react_transition_group_1 = require("react-transition-group");
var useModal_1 = __importDefault(require("../useModal"));
var baseClass_1 = __importDefault(require("./baseClass"));
var generateTransitionClasses_1 = __importDefault(require("../ModalProvider/generateTransitionClasses"));
var asModal = function (ModalComponent, slugFromArg) {
    var ModalWrap = function (props) {
        var modal = useModal_1.default();
        var modalRef = react_1.useRef(null);
        var currentModal = modal.currentModal, classPrefixFromContext = modal.classPrefix, containerRef = modal.containerRef, transTime = modal.transTime, setCloseOnBlur = modal.setCloseOnBlur, open = modal.open, setBodyScrollLock = modal.setBodyScrollLock;
        var id = props.id, className = props.className, _a = props.style, style = _a === void 0 ? {} : _a, _b = props.htmlElement, htmlElement = _b === void 0 ? 'dialog' : _b, _c = props.htmlAttributes, htmlAttributes = _c === void 0 ? {} : _c, _d = props.slug, slugFromProp = _d === void 0 ? '' : _d, _e = props.closeOnBlur, closeOnBlur = _e === void 0 ? true : _e, _f = props.lockBodyScroll, lockBodyScroll = _f === void 0 ? true : _f, 
        // autoFocus: true,
        // trapFocus: true,
        // returnFocus: true,
        classPrefixFromProps = props.classPrefix;
        var classPrefixToUse = classPrefixFromProps || classPrefixFromContext;
        var slug = slugFromArg || slugFromProp;
        var isFirstRender = react_1.useRef(true);
        var isOpen = currentModal === slug;
        react_1.useEffect(function () {
            // useful to maintain a true oneIsOpen provider state that is only
            // ever true if the slug URL parameter matches a mounted modal slug.
            // i.e. ModalContainer will be protected from erroneously opening.
            if (isFirstRender) {
                if (isOpen)
                    open(slug);
                isFirstRender.current = false;
            }
        }, [isOpen, open, isFirstRender, slug]);
        react_1.useEffect(function () {
            if (isOpen)
                setCloseOnBlur(closeOnBlur);
        }, [isOpen, closeOnBlur, setCloseOnBlur]);
        react_1.useEffect(function () {
            if (modalRef.current) {
                if (isOpen && lockBodyScroll) {
                    setBodyScrollLock(true, modalRef);
                }
                else {
                    setBodyScrollLock(false, modalRef);
                }
            }
        }, [isOpen, lockBodyScroll, setBodyScrollLock]);
        var _g = react_1.useState(isOpen), timedOpen = _g[0], setTimedOpen = _g[1];
        react_1.useEffect(function () {
            if (!isOpen)
                setTimeout(function () { return setTimedOpen(false); }, transTime);
            else
                setTimedOpen(isOpen);
        }, [isOpen, transTime]);
        if (containerRef.current) {
            var baseClass = classPrefixToUse + "__" + baseClass_1.default;
            var mergedClasses = [
                baseClass,
                baseClass + "--slug-" + slug,
                className,
            ].filter(Boolean).join(' ');
            var mergedAttributes = __assign({ role: htmlElement !== 'dialog' ? 'dialog' : undefined, open: htmlElement === 'dialog' ? timedOpen || isOpen : undefined, 'aria-modal': true, 'aria-label': !htmlAttributes['aria-labelledby'] ? slug : undefined }, htmlAttributes);
            var Tag = htmlElement;
            return react_dom_1.default.createPortal(react_1.default.createElement(react_transition_group_1.CSSTransition, { timeout: transTime, in: currentModal === slug, classNames: generateTransitionClasses_1.default(baseClass), appear: true },
                react_1.default.createElement(Tag, __assign({}, __assign({ ref: modalRef, id: id || slug, className: mergedClasses, style: style }, mergedAttributes)),
                    react_1.default.createElement(ModalComponent, __assign({}, __assign(__assign({}, props), { isOpen: isOpen,
                        modal: modal }))))), containerRef.current);
        }
        return null;
    };
    return ModalWrap;
};
exports.default = asModal;
//# sourceMappingURL=index.js.map