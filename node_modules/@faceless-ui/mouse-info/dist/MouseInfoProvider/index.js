"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var MouseInfoContext_1 = __importDefault(require("../MouseInfoContext"));
var MouseInfoProvider = /** @class */ (function (_super) {
    __extends(MouseInfoProvider, _super);
    function MouseInfoProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.requestAnimation = function (e) {
            var animationScheduled = _this.state.animationScheduled;
            if (!animationScheduled) {
                _this.setState({
                    animationScheduled: true,
                }, function () { return requestAnimationFrame(function (timestamp) { return _this.updateMouseInfo(e, timestamp); }); });
            }
        };
        _this.setViewportStatus = function (status) {
            _this.setState({ isInViewport: Boolean(status) });
        };
        _this.updateMouseInfo = function (e, timestamp) {
            var _a = _this.state, prevMouseX = _a.x, prevMouseY = _a.y, prevXDirection = _a.xDirection, prevYDirection = _a.yDirection, eventsFired = _a.eventsFired;
            var currentMouseX = e.clientX;
            var currentMouseY = e.clientY;
            var xDifference = currentMouseX - prevMouseX;
            var yDifference = currentMouseY - prevMouseY;
            var xPercentage = (currentMouseX / window.innerWidth) * 100;
            var yPercentage = (currentMouseY / window.innerHeight) * 100;
            var totalPercentage = (xPercentage + yPercentage) / 2;
            var xDirection = xDifference > 0 ? 'right' : xDifference < 0 ? 'left' : prevXDirection; // eslint-disable-line no-nested-ternary
            var yDirection = yDifference > 0 ? 'down' : yDifference < 0 ? 'up' : prevYDirection; // eslint-disable-line no-nested-ternary
            _this.setState({
                x: currentMouseX,
                y: currentMouseY,
                xDifference: xDifference,
                yDifference: yDifference,
                xDirection: xDirection,
                yDirection: yDirection,
                xPercentage: xPercentage,
                yPercentage: yPercentage,
                totalPercentage: totalPercentage,
                eventsFired: timestamp ? eventsFired + 1 : eventsFired,
                animationScheduled: false,
            });
        };
        _this.state = {
            x: 0,
            y: 0,
            xDifference: 0,
            yDifference: 0,
            xDirection: undefined,
            yDirection: undefined,
            xPercentage: 0,
            yPercentage: 0,
            totalPercentage: 0,
            isInViewport: false,
            eventsFired: 0,
            animationScheduled: false,
        };
        return _this;
    }
    MouseInfoProvider.prototype.componentDidMount = function () {
        var _this = this;
        document.addEventListener('mousemove', this.requestAnimation);
        document.addEventListener('mouseenter', function () { return _this.setViewportStatus(true); });
        document.addEventListener('mouseleave', function () { return _this.setViewportStatus(false); });
    };
    MouseInfoProvider.prototype.componentWillUnmount = function () {
        var _this = this;
        document.removeEventListener('mousemove', this.requestAnimation);
        document.removeEventListener('mouseenter', function () { return _this.setViewportStatus; });
        document.removeEventListener('mouseleave', function () { return _this.setViewportStatus; });
    };
    MouseInfoProvider.prototype.render = function () {
        var children = this.props.children;
        var mouseInfo = __assign({}, this.state);
        delete mouseInfo.animationScheduled;
        return (react_1.default.createElement(MouseInfoContext_1.default.Provider, { value: __assign({}, mouseInfo) }, children && children));
    };
    return MouseInfoProvider;
}(react_1.Component));
exports.default = MouseInfoProvider;
//# sourceMappingURL=index.js.map