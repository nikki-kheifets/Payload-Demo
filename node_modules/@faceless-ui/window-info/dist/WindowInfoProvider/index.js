"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var WindowInfoContext_1 = __importDefault(require("../WindowInfoContext"));
var WindowInfoProvider = /** @class */ (function (_super) {
    __extends(WindowInfoProvider, _super);
    function WindowInfoProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.updateWindowInfoWithTimeout = function () {
            setTimeout(function () {
                _this.requestAnimation();
            }, 500);
        };
        _this.requestAnimation = function () {
            var animationScheduled = _this.state.animationScheduled;
            if (!animationScheduled) {
                _this.setState({
                    animationScheduled: true,
                }, function () { return requestAnimationFrame(_this.updateWindowInfo); });
            }
        };
        _this.updateWindowInfo = function () {
            var _a = _this.props.breakpoints, _b = _a === void 0 ? {} : _a, xs = _b.xs, s = _b.s, m = _b.m, l = _b.l, xl = _b.xl;
            var prevEventsFired = _this.state.eventsFired;
            var _c = document.documentElement, style = _c.style, clientWidth = _c.clientWidth, clientHeight = _c.clientHeight;
            var windowWidth = window.innerWidth, windowHeight = window.innerHeight;
            var viewportWidth = clientWidth / 100 + "px";
            var viewportHeight = clientHeight / 100 + "px";
            _this.setState({
                width: windowWidth,
                height: windowHeight,
                '--vw': viewportWidth,
                '--vh': viewportHeight,
                breakpoints: {
                    xs: window.matchMedia("(max-width: " + xs + "px)").matches,
                    s: window.matchMedia("(max-width: " + s + "px)").matches,
                    m: window.matchMedia("(max-width: " + m + "px)").matches,
                    l: window.matchMedia("(max-width: " + l + "px)").matches,
                    xl: window.matchMedia("(max-width: " + xl + "px)").matches,
                },
                eventsFired: prevEventsFired + 1,
                animationScheduled: false,
            });
            // This method is a cross-browser patch to achieve above-the-fold, fullscreen mobile experiences.
            // The technique accounts for the collapsing bottom toolbar of some mobile browsers which are out of normal flow.
            // It provides an alternate to the "vw" and "vh" CSS units by generating respective CSS variables.
            // It specifically reads the size of documentElement since its height does not include the toolbar.
            style.setProperty('--vw', viewportWidth);
            style.setProperty('--vh', viewportHeight);
        };
        _this.state = {
            width: 0,
            height: 0,
            '--vw': '0px',
            '--vh': '0px',
            breakpoints: {
                xs: false,
                s: false,
                m: false,
                l: false,
                xl: false,
            },
            eventsFired: 0,
            animationScheduled: false,
        };
        return _this;
    }
    WindowInfoProvider.prototype.componentDidMount = function () {
        window.addEventListener('resize', this.requestAnimation);
        window.addEventListener('orientationchange', this.updateWindowInfoWithTimeout);
        this.updateWindowInfo();
    };
    WindowInfoProvider.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.requestAnimation);
        window.removeEventListener('orientationchange', this.updateWindowInfoWithTimeout);
    };
    WindowInfoProvider.prototype.render = function () {
        var children = this.props.children;
        var windowInfo = __assign({}, this.state);
        delete windowInfo.animationScheduled;
        return (react_1.default.createElement(WindowInfoContext_1.default.Provider, { value: __assign({}, windowInfo) }, children && children));
    };
    return WindowInfoProvider;
}(react_1.Component));
exports.default = WindowInfoProvider;
//# sourceMappingURL=index.js.map