import React, { useEffect, useState } from 'react';
import AnimateHeight from 'react-animate-height';
import SearchFilter from '../SearchFilter';
import ColumnSelector from '../ColumnSelector';
import WhereBuilder from '../WhereBuilder';
import SortComplex from '../SortComplex';
import Button from '../Button';
import './index.scss';
const baseClass = 'list-controls';
const ListControls = (props) => {
    const { handleChange, collection, enableColumns = true, enableSort = false, setSort, collection: { fields, admin: { useAsTitle, }, }, } = props;
    const [titleField, setTitleField] = useState(null);
    const [search, setSearch] = useState('');
    const [columns, setColumns] = useState([]);
    const [where, setWhere] = useState({});
    const [visibleDrawer, setVisibleDrawer] = useState();
    useEffect(() => {
        if (useAsTitle) {
            const foundTitleField = fields.find((field) => field.name === useAsTitle);
            if (foundTitleField) {
                setTitleField(foundTitleField);
            }
        }
    }, [useAsTitle, fields]);
    useEffect(() => {
        const newState = {
            columns,
        };
        if (search) {
            newState.where = {
                and: [
                    search,
                ],
            };
        }
        if (where) {
            if (!search) {
                newState.where = {
                    and: [],
                };
            }
            newState.where.and.push(where);
        }
        handleChange(newState);
    }, [search, columns, where, handleChange]);
    return (React.createElement("div", { className: baseClass },
        React.createElement("div", { className: `${baseClass}__wrap` },
            React.createElement(SearchFilter, { handleChange: setSearch, fieldName: titleField ? titleField.name : undefined, fieldLabel: titleField ? titleField.label : undefined }),
            React.createElement("div", { className: `${baseClass}__buttons` },
                React.createElement("div", { className: `${baseClass}__buttons-wrap` },
                    enableColumns && (React.createElement(Button, { className: `${baseClass}__toggle-columns`, buttonStyle: visibleDrawer === 'columns' ? undefined : 'secondary', onClick: () => setVisibleDrawer(visibleDrawer !== 'columns' ? 'columns' : undefined), icon: "chevron", iconStyle: "none" }, "Columns")),
                    React.createElement(Button, { className: `${baseClass}__toggle-where`, buttonStyle: visibleDrawer === 'where' ? undefined : 'secondary', onClick: () => setVisibleDrawer(visibleDrawer !== 'where' ? 'where' : undefined), icon: "chevron", iconStyle: "none" }, "Filters"),
                    enableSort && (React.createElement(Button, { className: `${baseClass}__toggle-sort`, buttonStyle: visibleDrawer === 'sort' ? undefined : 'secondary', onClick: () => setVisibleDrawer(visibleDrawer !== 'sort' ? 'sort' : undefined), icon: "chevron", iconStyle: "none" }, "Sort"))))),
        enableColumns && (React.createElement(AnimateHeight, { className: `${baseClass}__columns`, height: visibleDrawer === 'columns' ? 'auto' : 0 },
            React.createElement(ColumnSelector, { collection: collection, handleChange: setColumns }))),
        React.createElement(AnimateHeight, { className: `${baseClass}__where`, height: visibleDrawer === 'where' ? 'auto' : 0 },
            React.createElement(WhereBuilder, { handleChange: setWhere, collection: collection })),
        enableSort && (React.createElement(AnimateHeight, { className: `${baseClass}__sort`, height: visibleDrawer === 'sort' ? 'auto' : 0 },
            React.createElement(SortComplex, { handleChange: setSort, collection: collection })))));
};
export default ListControls;
