import React, { useState, useEffect } from 'react';
import ReactSelect from '../ReactSelect';
import sortableFieldTypes from '../../../../fields/sortableFieldTypes';
import './index.scss';
const baseClass = 'sort-complex';
const sortOptions = [{ label: 'Ascending', value: '' }, { label: 'Descending', value: '-' }];
const SortComplex = (props) => {
    const { collection, handleChange, } = props;
    const [sortFields] = useState(() => collection.fields.reduce((fields, field) => {
        if (field.name && sortableFieldTypes.indexOf(field.type) > -1) {
            return [
                ...fields,
                { label: field.label, value: field.name },
            ];
        }
        return fields;
    }, []));
    const [sortField, setSortField] = useState(null);
    const [sortOrder, setSortOrder] = useState('-');
    useEffect(() => {
        if (sortField) {
            handleChange(`${sortOrder}${sortField}`);
        }
    }, [sortField, sortOrder, handleChange]);
    return (React.createElement("div", { className: baseClass },
        React.createElement(React.Fragment, null,
            React.createElement("div", { className: `${baseClass}__wrap` },
                React.createElement("div", { className: `${baseClass}__select` },
                    React.createElement("div", { className: `${baseClass}__label` }, "Column to Sort"),
                    React.createElement(ReactSelect, { value: sortFields.find((field) => field.name === sortField), options: sortFields, onChange: setSortField })),
                React.createElement("div", { className: `${baseClass}__select` },
                    React.createElement("div", { className: `${baseClass}__label` }, "Order"),
                    React.createElement(ReactSelect, { value: sortOptions.find((order) => order.value === sortOrder), options: sortOptions, onChange: setSortOrder }))))));
};
export default SortComplex;
