import React, { Fragment, useCallback, useEffect, useRef, useState } from 'react';
import { ReactEditor, useSlate } from 'slate-react';
import { useWindowInfo } from '@faceless-ui/window-info';
import { Transforms } from 'slate';
import ElementButton from '../Button';
import { withLinks, wrapLink } from './utilities';
import LinkIcon from '../../../../../icons/Link';
import Portal from '../../../../../utilities/Portal';
import Popup from '../../../../../elements/Popup';
import Button from '../../../../../elements/Button';
import Check from '../../../../../icons/Check';
import Error from '../../../../Error';
import getOffsetTop from '../../../../../../utilities/getOffsetTop';
import './index.scss';
const baseClass = 'rich-text-link';
const Link = ({ attributes, children, element }) => {
    const editor = useSlate();
    const linkRef = useRef(null);
    const { height: windowHeight, width: windowWidth } = useWindowInfo();
    const [left, setLeft] = useState(0);
    const [top, setTop] = useState(0);
    const [error, setError] = useState(false);
    const [width, setWidth] = useState(0);
    const [height, setHeight] = useState(0);
    const [url, setURL] = useState(element.url);
    const [newTab, setNewTab] = useState(Boolean(element.newTab));
    const calculatePosition = useCallback(() => {
        if (linkRef === null || linkRef === void 0 ? void 0 : linkRef.current) {
            const rect = linkRef.current.getBoundingClientRect();
            const offsetTop = getOffsetTop(linkRef.current);
            setTop(offsetTop);
            setLeft(rect.left);
            setWidth(rect.width);
            setHeight(rect.height);
        }
    }, []);
    useEffect(() => {
        calculatePosition();
    }, [children, calculatePosition, windowHeight, windowWidth]);
    useEffect(() => {
        const path = ReactEditor.findPath(editor, element);
        Transforms.setNodes(editor, { url, newTab }, { at: path });
    }, [url, newTab, editor, element]);
    return (React.createElement("span", { className: baseClass, ...attributes },
        React.createElement("span", { ref: linkRef },
            React.createElement(Portal, null,
                React.createElement("div", { className: `${baseClass}__popup-wrap`, style: {
                        width,
                        height,
                        top,
                        left,
                    } },
                    React.createElement(Popup, { initActive: url === undefined, buttonType: "custom", button: React.createElement("span", { className: `${baseClass}__button` }), size: "small", color: "dark", horizontalAlign: "center", onToggleOpen: calculatePosition, render: ({ close }) => (React.createElement(Fragment, null,
                            React.createElement("div", { className: `${baseClass}__url-wrap` },
                                React.createElement("input", { value: url || '', className: `${baseClass}__url`, placeholder: "Enter a URL", onChange: (e) => {
                                        const { value } = e.target;
                                        if (value && error) {
                                            setError(false);
                                        }
                                        setURL(value);
                                    }, onKeyDown: (e) => {
                                        if (e.key === 'Enter') {
                                            close();
                                        }
                                    } }),
                                React.createElement(Button, { className: `${baseClass}__confirm`, buttonStyle: "none", icon: "chevron", onClick: (e) => {
                                        e.preventDefault();
                                        if (url) {
                                            close();
                                        }
                                        else {
                                            setError(true);
                                        }
                                    } }),
                                error && (React.createElement(Error, { showError: error, message: "Please enter a valid URL." }))),
                            React.createElement(Button, { className: [`${baseClass}__new-tab`, newTab && `${baseClass}__new-tab--checked`].filter(Boolean).join(' '), buttonStyle: "none", onClick: () => setNewTab(!newTab) },
                                React.createElement(Check, null),
                                "Open link in new tab"))) }))),
            children)));
};
const LinkButton = () => {
    const editor = useSlate();
    return (React.createElement(ElementButton, { format: "link", onClick: () => wrapLink(editor) },
        React.createElement(LinkIcon, null)));
};
const link = {
    Button: LinkButton,
    Element: Link,
    plugins: [
        withLinks,
    ],
};
export default link;
