import React, { useState, useEffect } from 'react';
import { Modal, useModal } from '@faceless-ui/modal';
import { useConfig } from '@payloadcms/config-provider';
import MinimalTemplate from '../../../../templates/Minimal';
import Button from '../../../../elements/Button';
import formatFields from '../../../../views/collections/List/formatFields';
import usePayloadAPI from '../../../../../hooks/usePayloadAPI';
import ListControls from '../../../../elements/ListControls';
import Paginator from '../../../../elements/Paginator';
import UploadGallery from '../../../../elements/UploadGallery';
import './index.scss';
const baseClass = 'select-existing-upload-modal';
const SelectExistingUploadModal = (props) => {
    const { setValue, collection, collection: { slug: collectionSlug, admin: { description, } = {}, } = {}, slug: modalSlug, } = props;
    const { serverURL, routes: { api } } = useConfig();
    const { closeAll, currentModal } = useModal();
    const [fields, setFields] = useState(collection.fields);
    const [listControls, setListControls] = useState({});
    const [page, setPage] = useState(null);
    const [sort, setSort] = useState(null);
    const classes = [
        baseClass,
    ].filter(Boolean).join(' ');
    const isOpen = currentModal === modalSlug;
    const apiURL = isOpen ? `${serverURL}${api}/${collectionSlug}` : null;
    const [{ data }, { setParams }] = usePayloadAPI(apiURL, {});
    useEffect(() => {
        setFields(formatFields(collection));
    }, [collection]);
    useEffect(() => {
        const params = {};
        if (page)
            params.page = page;
        if (listControls === null || listControls === void 0 ? void 0 : listControls.where)
            params.where = listControls.where;
        if (sort)
            params.sort = sort;
        setParams(params);
    }, [setParams, page, listControls, sort]);
    return (React.createElement(Modal, { className: classes, slug: modalSlug }, isOpen && (React.createElement(MinimalTemplate, { width: "wide" },
        React.createElement("header", { className: `${baseClass}__header` },
            React.createElement("div", null,
                React.createElement("h1", null,
                    ' ',
                    "Select existing",
                    ' ',
                    collection.labels.singular),
                React.createElement(Button, { icon: "x", round: true, buttonStyle: "icon-label", iconStyle: "with-border", onClick: closeAll })),
            description && (React.createElement("div", { className: `${baseClass}__sub-header` }, description))),
        React.createElement(ListControls, { handleChange: setListControls, collection: {
                ...collection,
                fields,
            }, enableColumns: false, setSort: setSort, enableSort: true }),
        React.createElement(UploadGallery, { docs: data === null || data === void 0 ? void 0 : data.docs, collection: collection, onCardClick: (doc) => {
                setValue(doc);
                closeAll();
            } }),
        React.createElement("div", { className: `${baseClass}__page-controls` },
            React.createElement(Paginator, { limit: data.limit, totalPages: data.totalPages, page: data.page, hasPrevPage: data.hasPrevPage, hasNextPage: data.hasNextPage, prevPage: data.prevPage, nextPage: data.nextPage, numberOfNeighbors: 1, onChange: setPage, disableHistoryChange: true }),
            (data === null || data === void 0 ? void 0 : data.totalDocs) > 0 && (React.createElement("div", { className: `${baseClass}__page-info` },
                data.page,
                "-",
                data.totalPages > 1 ? data.limit : data.totalDocs,
                ' ',
                "of",
                ' ',
                data.totalDocs)))))));
};
export default SelectExistingUploadModal;
