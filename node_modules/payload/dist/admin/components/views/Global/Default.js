import React from 'react';
import format from 'date-fns/format';
import { useConfig } from '@payloadcms/config-provider';
import Eyebrow from '../../elements/Eyebrow';
import Form from '../../forms/Form';
import PreviewButton from '../../elements/PreviewButton';
import FormSubmit from '../../forms/Submit';
import RenderFields from '../../forms/RenderFields';
import CopyToClipboard from '../../elements/CopyToClipboard';
import Meta from '../../utilities/Meta';
import fieldTypes from '../../forms/field-types';
import LeaveWithoutSaving from '../../modals/LeaveWithoutSaving';
import './index.scss';
import ViewDescription from '../../elements/ViewDescription';
const baseClass = 'global-edit';
const DefaultGlobalView = (props) => {
    var _a;
    const { admin: { dateFormat } } = useConfig();
    const { global, data, onSave, permissions, action, apiURL, initialState, } = props;
    const { fields, preview, label, admin: { description, } = {}, } = global;
    const hasSavePermission = (_a = permissions === null || permissions === void 0 ? void 0 : permissions.update) === null || _a === void 0 ? void 0 : _a.permission;
    return (React.createElement("div", { className: baseClass },
        React.createElement(Form, { className: `${baseClass}__form`, method: "post", action: action, onSuccess: onSave, disabled: !hasSavePermission, initialState: initialState },
            React.createElement("div", { className: `${baseClass}__main` },
                React.createElement(Meta, { title: label, description: label, keywords: `${label}, Payload, CMS` }),
                React.createElement(Eyebrow, null),
                React.createElement(LeaveWithoutSaving, null),
                React.createElement("div", { className: `${baseClass}__edit` },
                    React.createElement("header", { className: `${baseClass}__header` },
                        React.createElement("h1", null,
                            "Edit",
                            ' ',
                            label),
                        description && (React.createElement("div", { className: `${baseClass}__sub-header` },
                            React.createElement(ViewDescription, { description: description })))),
                    React.createElement(RenderFields, { operation: "update", readOnly: !hasSavePermission, permissions: permissions.fields, filter: (field) => (!field.admin.position || (field.admin.position && field.admin.position !== 'sidebar')), fieldTypes: fieldTypes, fieldSchema: fields }))),
            React.createElement("div", { className: `${baseClass}__sidebar-wrap` },
                React.createElement("div", { className: `${baseClass}__sidebar` },
                    React.createElement("div", { className: `${baseClass}__sidebar-sticky-wrap` },
                        React.createElement("div", { className: `${baseClass}__document-actions${preview ? ` ${baseClass}__document-actions--with-preview` : ''}` },
                            React.createElement(PreviewButton, { generatePreviewURL: preview, data: data }),
                            hasSavePermission && (React.createElement(FormSubmit, null, "Save"))),
                        React.createElement("div", { className: `${baseClass}__sidebar-fields` },
                            React.createElement(RenderFields, { operation: "update", readOnly: !hasSavePermission, permissions: permissions.fields, filter: (field) => field.admin.position === 'sidebar', fieldTypes: fieldTypes, fieldSchema: fields })),
                        data && (React.createElement("ul", { className: `${baseClass}__meta` },
                            data && (React.createElement("li", { className: `${baseClass}__api-url` },
                                React.createElement("span", { className: `${baseClass}__label` },
                                    "API URL",
                                    ' ',
                                    React.createElement(CopyToClipboard, { value: apiURL })),
                                React.createElement("a", { href: apiURL, target: "_blank", rel: "noopener noreferrer" }, apiURL))),
                            data.updatedAt && (React.createElement("li", null,
                                React.createElement("div", { className: `${baseClass}__label` }, "Last Modified"),
                                React.createElement("div", null, format(new Date(data.updatedAt), dateFormat))))))))))));
};
export default DefaultGlobalView;
