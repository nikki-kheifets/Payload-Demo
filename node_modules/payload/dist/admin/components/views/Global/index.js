import React, { useState, useEffect } from 'react';
import { useHistory, useLocation } from 'react-router-dom';
import { useConfig, useAuth } from '@payloadcms/config-provider';
import { useStepNav } from '../../elements/StepNav';
import usePayloadAPI from '../../../hooks/usePayloadAPI';
import { DocumentInfoProvider } from '../../utilities/DocumentInfo';
import { useLocale } from '../../utilities/Locale';
import RenderCustomComponent from '../../utilities/RenderCustomComponent';
import DefaultGlobal from './Default';
import buildStateFromSchema from '../../forms/Form/buildStateFromSchema';
import { NegativeFieldGutterProvider } from '../../forms/FieldTypeGutter/context';
const GlobalView = (props) => {
    var _a;
    const { state: locationState } = useLocation();
    const history = useHistory();
    const locale = useLocale();
    const { setStepNav } = useStepNav();
    const { permissions } = useAuth();
    const [initialState, setInitialState] = useState({});
    const { serverURL, routes: { admin, api, }, } = useConfig();
    const { global } = props;
    const { slug, label, fields, admin: { components: { views: { Edit: CustomEdit, } = {}, } = {}, } = {}, } = global;
    const onSave = (json) => {
        history.push(`${admin}/globals/${global.slug}`, {
            status: {
                message: json.message,
                type: 'success',
            },
            data: json.doc,
        });
    };
    const [{ data }] = usePayloadAPI(`${serverURL}${api}/globals/${slug}`, { initialParams: { 'fallback-locale': 'null', depth: 0 } });
    const dataToRender = (locationState === null || locationState === void 0 ? void 0 : locationState.data) || data;
    useEffect(() => {
        const nav = [{
                label,
            }];
        setStepNav(nav);
    }, [setStepNav, label]);
    useEffect(() => {
        const awaitInitialState = async () => {
            const state = await buildStateFromSchema(fields, dataToRender);
            setInitialState(state);
        };
        awaitInitialState();
    }, [dataToRender, fields]);
    const globalPermissions = (_a = permissions === null || permissions === void 0 ? void 0 : permissions.globals) === null || _a === void 0 ? void 0 : _a[slug];
    return (React.createElement(DocumentInfoProvider, { slug: slug, type: "global" },
        React.createElement(NegativeFieldGutterProvider, { allow: true },
            React.createElement(RenderCustomComponent, { DefaultComponent: DefaultGlobal, CustomComponent: CustomEdit, componentProps: {
                    data: dataToRender,
                    permissions: globalPermissions,
                    initialState,
                    global,
                    onSave,
                    apiURL: `${serverURL}${api}/globals/${slug}?depth=0`,
                    action: `${serverURL}${api}/globals/${slug}?locale=${locale}&depth=0&fallback-locale=null`,
                } }))));
};
export default GlobalView;
