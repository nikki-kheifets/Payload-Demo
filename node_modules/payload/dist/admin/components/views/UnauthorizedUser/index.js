import React from 'react';
import { useAuth, useConfig } from '@payloadcms/config-provider';
import Button from '../../elements/Button';
import Meta from '../../utilities/Meta';
import Banner from '../../elements/Banner';
import MinimalTemplate from '../../templates/Minimal';
import X from '../../icons/X';
import './index.scss';
const baseClass = 'unauthorized-user';
const UnauthorizedUser = () => {
    const { licensePlan, user } = useAuth();
    const { routes: { admin, }, } = useConfig();
    return (React.createElement(MinimalTemplate, { className: baseClass },
        React.createElement(Meta, { title: "Unauthorized User", description: "Unauthorized User", keywords: "Unauthorized, Payload, CMS" }),
        React.createElement("h2", null, "Your user account is unauthorized"),
        React.createElement(Banner, { type: "error", alignIcon: "left", icon: React.createElement(X, null) },
            "Sorry, the",
            ' ',
            React.createElement("strong", { className: `${baseClass}__plan-name` }, licensePlan),
            ' ',
            "license associated with this domain does not grant access to your email address (",
            React.createElement("strong", null, user === null || user === void 0 ? void 0 : user.email),
            ")."),
        React.createElement("p", null, "Don't worry\u2014your Payload API is still accessible, but you can only access the Payload admin panel with user(s) that are specifically whitelisted by the owner of this Payload license."),
        React.createElement("p", null, "The user accounts that are granted access can be configured within the Payload CMS website. Contact the owner of the license to learn more."),
        React.createElement("div", { className: `${baseClass}__button-group` },
            React.createElement(Button, { el: "link", url: `${admin}/logout` }, "Log out"),
            React.createElement(Button, { el: "anchor", url: "https://payloadcms.com/login", buttonStyle: "secondary", newTab: true }, "Go to the Payload CMS website"))));
};
export default UnauthorizedUser;
