import React from 'react';
import { Link, useRouteMatch } from 'react-router-dom';
import format from 'date-fns/format';
import { useConfig } from '@payloadcms/config-provider';
import Eyebrow from '../../../elements/Eyebrow';
import Form from '../../../forms/Form';
import Loading from '../../../elements/Loading';
import PreviewButton from '../../../elements/PreviewButton';
import FormSubmit from '../../../forms/Submit';
import RenderFields from '../../../forms/RenderFields';
import CopyToClipboard from '../../../elements/CopyToClipboard';
import DuplicateDocument from '../../../elements/DuplicateDocument';
import DeleteDocument from '../../../elements/DeleteDocument';
import Meta from '../../../utilities/Meta';
import fieldTypes from '../../../forms/field-types';
import RenderTitle from '../../../elements/RenderTitle';
import LeaveWithoutSaving from '../../../modals/LeaveWithoutSaving';
import Auth from './Auth';
import Upload from './Upload';
import './index.scss';
const baseClass = 'collection-edit';
const DefaultEditView = (props) => {
    var _a, _b;
    const { params: { id } = {} } = useRouteMatch();
    const { admin: { dateFormat }, routes: { admin } } = useConfig();
    const { collection, isEditing, data, onSave, permissions, isLoading, initialState, apiURL, action, hasSavePermission, } = props;
    const { slug, fields, admin: { useAsTitle, disableDuplicate, preview, }, timestamps, auth, upload, } = collection;
    const classes = [
        baseClass,
        isEditing && `${baseClass}--is-editing`,
    ].filter(Boolean).join(' ');
    const operation = isEditing ? 'update' : 'create';
    return (React.createElement("div", { className: classes },
        React.createElement(Form, { className: `${baseClass}__form`, method: id ? 'put' : 'post', action: action, onSuccess: onSave, disabled: !hasSavePermission, initialState: initialState },
            React.createElement("div", { className: `${baseClass}__main` },
                React.createElement(Meta, { title: `${isEditing ? 'Editing' : 'Creating'} - ${collection.labels.singular}`, description: `${isEditing ? 'Editing' : 'Creating'} - ${collection.labels.singular}`, keywords: `${collection.labels.singular}, Payload, CMS` }),
                React.createElement(Eyebrow, null),
                React.createElement(LeaveWithoutSaving, null),
                React.createElement("div", { className: `${baseClass}__edit` },
                    isLoading && (React.createElement(Loading, null)),
                    !isLoading && (React.createElement(React.Fragment, null,
                        React.createElement("header", { className: `${baseClass}__header` },
                            React.createElement("h1", null,
                                React.createElement(RenderTitle, { ...{ data, useAsTitle, fallback: '[Untitled]' } }))),
                        auth && (React.createElement(Auth, { useAPIKey: auth.useAPIKey, requirePassword: !isEditing, verify: auth.verify, collection: collection, email: data === null || data === void 0 ? void 0 : data.email, operation: operation })),
                        upload && (React.createElement(Upload, { data: data, collection: collection })),
                        React.createElement(RenderFields, { operation: operation, readOnly: !hasSavePermission, permissions: permissions.fields, filter: (field) => { var _a, _b; return (!((_a = field === null || field === void 0 ? void 0 : field.admin) === null || _a === void 0 ? void 0 : _a.position) || (((_b = field === null || field === void 0 ? void 0 : field.admin) === null || _b === void 0 ? void 0 : _b.position) !== 'sidebar')); }, fieldTypes: fieldTypes, fieldSchema: fields }))))),
            React.createElement("div", { className: `${baseClass}__sidebar-wrap` },
                React.createElement("div", { className: `${baseClass}__sidebar` },
                    React.createElement("div", { className: `${baseClass}__sidebar-sticky-wrap` },
                        isEditing ? (React.createElement("ul", { className: `${baseClass}__collection-actions` },
                            ((_a = permissions === null || permissions === void 0 ? void 0 : permissions.create) === null || _a === void 0 ? void 0 : _a.permission) && (React.createElement(React.Fragment, null,
                                React.createElement("li", null,
                                    React.createElement(Link, { to: `${admin}/collections/${slug}/create` }, "Create New")),
                                !disableDuplicate && (React.createElement("li", null,
                                    React.createElement(DuplicateDocument, { slug: slug }))))),
                            ((_b = permissions === null || permissions === void 0 ? void 0 : permissions.delete) === null || _b === void 0 ? void 0 : _b.permission) && (React.createElement("li", null,
                                React.createElement(DeleteDocument, { collection: collection, id: id }))))) : undefined,
                        React.createElement("div", { className: `${baseClass}__document-actions${(preview && isEditing) ? ` ${baseClass}__document-actions--with-preview` : ''}` },
                            isEditing && (React.createElement(PreviewButton, { generatePreviewURL: preview, data: data })),
                            hasSavePermission && (React.createElement(FormSubmit, null, "Save"))),
                        !isLoading && (React.createElement(React.Fragment, null,
                            React.createElement("div", { className: `${baseClass}__sidebar-fields` },
                                React.createElement(RenderFields, { operation: isEditing ? 'update' : 'create', readOnly: !hasSavePermission, permissions: permissions.fields, filter: (field) => { var _a; return ((_a = field === null || field === void 0 ? void 0 : field.admin) === null || _a === void 0 ? void 0 : _a.position) === 'sidebar'; }, fieldTypes: fieldTypes, fieldSchema: fields })),
                            isEditing && (React.createElement("ul", { className: `${baseClass}__meta` },
                                React.createElement("li", { className: `${baseClass}__api-url` },
                                    React.createElement("span", { className: `${baseClass}__label` },
                                        "API URL",
                                        ' ',
                                        React.createElement(CopyToClipboard, { value: apiURL })),
                                    React.createElement("a", { href: apiURL, target: "_blank", rel: "noopener noreferrer" }, apiURL)),
                                React.createElement("li", null,
                                    React.createElement("div", { className: `${baseClass}__label` }, "ID"),
                                    React.createElement("div", null, id)),
                                timestamps && (React.createElement(React.Fragment, null,
                                    data.updatedAt && (React.createElement("li", null,
                                        React.createElement("div", { className: `${baseClass}__label` }, "Last Modified"),
                                        React.createElement("div", null, format(new Date(data.updatedAt), dateFormat)))),
                                    data.createdAt && (React.createElement("li", null,
                                        React.createElement("div", { className: `${baseClass}__label` }, "Created"),
                                        React.createElement("div", null, format(new Date(data.createdAt), dateFormat))))))))))))))));
};
export default DefaultEditView;
