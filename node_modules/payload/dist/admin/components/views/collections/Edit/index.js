import React, { useState, useEffect } from 'react';
import { Redirect, useRouteMatch, useHistory, useLocation } from 'react-router-dom';
import { useConfig, useAuth } from '@payloadcms/config-provider';
import { useStepNav } from '../../../elements/StepNav';
import usePayloadAPI from '../../../../hooks/usePayloadAPI';
import RenderCustomComponent from '../../../utilities/RenderCustomComponent';
import { DocumentInfoProvider } from '../../../utilities/DocumentInfo';
import DefaultEdit from './Default';
import buildStateFromSchema from '../../../forms/Form/buildStateFromSchema';
import { NegativeFieldGutterProvider } from '../../../forms/FieldTypeGutter/context';
import { useLocale } from '../../../utilities/Locale';
const EditView = (props) => {
    var _a, _b, _c, _d;
    const { collection, isEditing } = props;
    const { slug, labels: { plural: pluralLabel, }, admin: { useAsTitle, components: { views: { Edit: CustomEdit, } = {}, } = {}, } = {}, fields, } = collection;
    const locale = useLocale();
    const { serverURL, routes: { admin, api } } = useConfig();
    const { params: { id } = {} } = useRouteMatch();
    const { state: locationState } = useLocation();
    const history = useHistory();
    const { setStepNav } = useStepNav();
    const [initialState, setInitialState] = useState({});
    const { permissions } = useAuth();
    const onSave = async (json) => {
        var _a;
        if (!isEditing) {
            history.push(`${admin}/collections/${collection.slug}/${(_a = json === null || json === void 0 ? void 0 : json.doc) === null || _a === void 0 ? void 0 : _a.id}`);
        }
        else {
            const state = await buildStateFromSchema(fields, json.doc);
            setInitialState(state);
        }
    };
    const [{ data, isLoading, isError }] = usePayloadAPI((isEditing ? `${serverURL}${api}/${slug}/${id}` : null), { initialParams: { 'fallback-locale': 'null', depth: 0 } });
    const dataToRender = ((_a = locationState) === null || _a === void 0 ? void 0 : _a.data) || data;
    useEffect(() => {
        const nav = [{
                url: `${admin}/collections/${slug}`,
                label: pluralLabel,
            }];
        if (isEditing) {
            nav.push({
                label: dataToRender ? dataToRender[useAsTitle || 'id'] : '',
            });
        }
        else {
            nav.push({
                label: 'Create New',
            });
        }
        setStepNav(nav);
    }, [setStepNav, isEditing, pluralLabel, dataToRender, slug, useAsTitle, admin]);
    useEffect(() => {
        const awaitInitialState = async () => {
            const state = await buildStateFromSchema(fields, dataToRender);
            setInitialState(state);
        };
        awaitInitialState();
    }, [dataToRender, fields]);
    if (isError) {
        return (React.createElement(Redirect, { to: `${admin}/not-found` }));
    }
    const collectionPermissions = (_b = permissions === null || permissions === void 0 ? void 0 : permissions.collections) === null || _b === void 0 ? void 0 : _b[slug];
    const apiURL = `${serverURL}${api}/${slug}/${id}`;
    const action = `${serverURL}${api}/${slug}${isEditing ? `/${id}` : ''}?locale=${locale}&depth=0&fallback-locale=null`;
    const hasSavePermission = (isEditing && ((_c = collectionPermissions === null || collectionPermissions === void 0 ? void 0 : collectionPermissions.update) === null || _c === void 0 ? void 0 : _c.permission)) || (!isEditing && ((_d = collectionPermissions === null || collectionPermissions === void 0 ? void 0 : collectionPermissions.create) === null || _d === void 0 ? void 0 : _d.permission));
    return (React.createElement(DocumentInfoProvider, { id: id, slug: collection.slug, type: "collection" },
        React.createElement(NegativeFieldGutterProvider, { allow: true },
            React.createElement(RenderCustomComponent, { DefaultComponent: DefaultEdit, CustomComponent: CustomEdit, componentProps: {
                    isLoading,
                    data: dataToRender,
                    collection,
                    permissions: collectionPermissions,
                    isEditing,
                    onSave,
                    initialState,
                    hasSavePermission,
                    apiURL,
                    action,
                } }))));
};
export default EditView;
