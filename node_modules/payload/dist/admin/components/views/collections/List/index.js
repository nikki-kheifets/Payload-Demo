import React, { useEffect, useState } from 'react';
import queryString from 'qs';
import { useLocation } from 'react-router-dom';
import { useConfig, useAuth } from '@payloadcms/config-provider';
import usePayloadAPI from '../../../../hooks/usePayloadAPI';
import DefaultList from './Default';
import RenderCustomComponent from '../../../utilities/RenderCustomComponent';
import { useStepNav } from '../../../elements/StepNav';
import formatFields from './formatFields';
import buildColumns from './buildColumns';
import { usePreferences } from '../../../utilities/Preferences';
const ListView = (props) => {
    var _a, _b;
    const { collection, collection: { slug, labels: { plural, }, admin: { components: { views: { List: CustomList, } = {}, } = {}, }, }, } = props;
    const { serverURL, routes: { api, admin } } = useConfig();
    const { permissions } = useAuth();
    const location = useLocation();
    const { setStepNav } = useStepNav();
    const { getPreference } = usePreferences();
    const [fields] = useState(() => formatFields(collection));
    const [listControls, setListControls] = useState({});
    const [columns, setColumns] = useState([]);
    const [sort, setSort] = useState(null);
    const collectionPermissions = (_a = permissions === null || permissions === void 0 ? void 0 : permissions.collections) === null || _a === void 0 ? void 0 : _a[slug];
    const hasCreatePermission = (_b = collectionPermissions === null || collectionPermissions === void 0 ? void 0 : collectionPermissions.create) === null || _b === void 0 ? void 0 : _b.permission;
    const { page } = queryString.parse(location.search, { ignoreQueryPrefix: true });
    const newDocumentURL = `${admin}/collections/${slug}/create`;
    const apiURL = `${serverURL}${api}/${slug}`;
    const [{ data }, { setParams }] = usePayloadAPI(apiURL, { initialParams: { depth: 0 } });
    const { columns: listControlsColumns } = listControls;
    useEffect(() => {
        const params = {
            depth: 1,
            page: undefined,
            sort: undefined,
            where: undefined,
        };
        if (page)
            params.page = page;
        if (sort)
            params.sort = sort;
        if (listControls === null || listControls === void 0 ? void 0 : listControls.where)
            params.where = listControls.where;
        setParams(params);
    }, [setParams, page, sort, listControls]);
    useEffect(() => {
        setStepNav([
            {
                label: plural,
            },
        ]);
    }, [setStepNav, plural]);
    useEffect(() => {
        (async () => {
            const columnPreferences = await getPreference(`${collection.slug}-list-columns`);
            setColumns(buildColumns(collection, columnPreferences || listControlsColumns, setSort));
        })();
    }, [collection, listControlsColumns, setSort, getPreference]);
    return (React.createElement(RenderCustomComponent, { DefaultComponent: DefaultList, CustomComponent: CustomList, componentProps: {
            collection: { ...collection, fields },
            newDocumentURL,
            hasCreatePermission,
            setSort,
            setListControls,
            listControls,
            data,
            columns,
        } }));
};
export default ListView;
