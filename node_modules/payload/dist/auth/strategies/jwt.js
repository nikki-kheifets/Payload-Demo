"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const passport_jwt_1 = __importDefault(require("passport-jwt"));
const getExtractJWT_1 = __importDefault(require("../getExtractJWT"));
const JwtStrategy = passport_jwt_1.default.Strategy;
exports.default = ({ secret, config, collections, operations }) => {
    const opts = {
        passReqToCallback: true,
        jwtFromRequest: getExtractJWT_1.default(config),
        secretOrKey: secret,
    };
    return new JwtStrategy(opts, async (req, token, done) => {
        try {
            const collection = collections[token.collection];
            const where = {};
            if (collection.config.auth.verify) {
                where.and = [
                    {
                        email: {
                            equals: token.email,
                        },
                    },
                    {
                        _verified: {
                            not_equals: false,
                        },
                    },
                ];
            }
            else {
                where.email = {
                    equals: token.email,
                };
            }
            const userQuery = await operations.collections.find({
                where,
                collection,
                req,
                overrideAccess: true,
                depth: collection.config.auth.depth,
            });
            if (userQuery.docs && userQuery.docs.length > 0) {
                const user = userQuery.docs[0];
                user.collection = collection.config.slug;
                done(null, user);
            }
            else {
                done(null, false);
            }
        }
        catch (err) {
            done(null, false);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2F1dGgvc3RyYXRlZ2llcy9qd3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxnRUFBNEQ7QUFFNUQscUVBQTZDO0FBRTdDLE1BQU0sV0FBVyxHQUFHLHNCQUFXLENBQUMsUUFBUSxDQUFDO0FBRXpDLGtCQUFlLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsRUFBb0IsRUFBRTtJQUMvRSxNQUFNLElBQUksR0FBb0I7UUFDNUIsaUJBQWlCLEVBQUUsSUFBSTtRQUN2QixjQUFjLEVBQUUsdUJBQWEsQ0FBQyxNQUFNLENBQUM7UUFDckMsV0FBVyxFQUFFLE1BQU07S0FDcEIsQ0FBQztJQUVGLE9BQU8sSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ3RELElBQUk7WUFDRixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBRWpELE1BQU0sS0FBSyxHQUEyQixFQUFFLENBQUM7WUFDekMsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pDLEtBQUssQ0FBQyxHQUFHLEdBQUc7b0JBQ1Y7d0JBQ0UsS0FBSyxFQUFFOzRCQUNMLE1BQU0sRUFBRSxLQUFLLENBQUMsS0FBSzt5QkFDcEI7cUJBQ0Y7b0JBQ0Q7d0JBQ0UsU0FBUyxFQUFFOzRCQUNULFVBQVUsRUFBRSxLQUFLO3lCQUNsQjtxQkFDRjtpQkFDRixDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsS0FBSyxDQUFDLEtBQUssR0FBRztvQkFDWixNQUFNLEVBQUUsS0FBSyxDQUFDLEtBQUs7aUJBQ3BCLENBQUM7YUFDSDtZQUVELE1BQU0sU0FBUyxHQUFHLE1BQU0sVUFBVSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELEtBQUs7Z0JBQ0wsVUFBVTtnQkFDVixHQUFHO2dCQUNILGNBQWMsRUFBRSxJQUFJO2dCQUNwQixLQUFLLEVBQUUsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSzthQUNwQyxDQUFDLENBQUM7WUFFSCxJQUFJLFNBQVMsQ0FBQyxJQUFJLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUMvQyxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUV6QyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ2xCO2lCQUFNO2dCQUNMLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDbkI7U0FDRjtRQUFDLE9BQU8sR0FBRyxFQUFFO1lBQ1osSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNuQjtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDIn0=