"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge_1 = __importDefault(require("deepmerge"));
const sanitize_1 = __importDefault(require("../../fields/config/sanitize"));
const toKebabCase_1 = __importDefault(require("../../utilities/toKebabCase"));
const baseAuthFields_1 = __importDefault(require("../../fields/baseFields/baseAuthFields"));
const baseAPIKeyFields_1 = __importDefault(require("../../fields/baseFields/baseAPIKeyFields"));
const baseVerificationFields_1 = __importDefault(require("../../fields/baseFields/baseVerificationFields"));
const baseAccountLockFields_1 = __importDefault(require("../../fields/baseFields/baseAccountLockFields"));
const baseUploadFields_1 = __importDefault(require("../../fields/baseFields/baseUploadFields"));
const baseImageUploadFields_1 = __importDefault(require("../../fields/baseFields/baseImageUploadFields"));
const formatLabels_1 = require("../../utilities/formatLabels");
const defaults_1 = require("./defaults");
const mimeTypeValidator_1 = require("../../fields/baseFields/mimeTypeValidator");
const mergeBaseFields = (fields, baseFields) => {
    const mergedFields = [];
    if (fields) {
        baseFields.forEach((baseField) => {
            let matchedIndex = null;
            const match = fields.find((field, i) => {
                if (field.name === baseField.name) {
                    matchedIndex = i;
                    return true;
                }
                return false;
            });
            if (match) {
                const matchCopy = { ...match };
                fields.splice(matchedIndex, 1);
                let mergedField = {
                    ...baseField,
                    ...matchCopy,
                };
                if (baseField.fields && matchCopy.fields) {
                    mergedField.fields = mergeBaseFields(matchCopy.fields, baseField.fields);
                    return mergedFields.push(mergedField);
                }
                mergedField = deepmerge_1.default(mergedField, matchCopy, { arrayMerge: (_, source) => source });
                return mergedFields.push(mergedField);
            }
            return mergedFields.push(baseField);
        });
        return mergedFields;
    }
    return baseFields;
};
const sanitizeCollection = (collections, collection) => {
    // /////////////////////////////////
    // Make copy of collection config
    // /////////////////////////////////
    const sanitized = deepmerge_1.default(defaults_1.defaults, collection);
    sanitized.slug = toKebabCase_1.default(sanitized.slug);
    sanitized.labels = sanitized.labels || formatLabels_1.formatLabels(sanitized.slug);
    if (sanitized.upload) {
        if (sanitized.upload === true)
            sanitized.upload = {};
        sanitized.upload.staticDir = sanitized.upload.staticDir || sanitized.slug;
        sanitized.upload.staticURL = sanitized.upload.staticURL || `/${sanitized.slug}`;
        sanitized.admin.useAsTitle = (sanitized.admin.useAsTitle && sanitized.admin.useAsTitle !== 'id') ? sanitized.admin.useAsTitle : 'filename';
        let uploadFields = baseUploadFields_1.default;
        if (sanitized.upload.mimeTypes) {
            uploadFields.find((f) => f.name === 'mimeType').validate = mimeTypeValidator_1.mimeTypeValidator(sanitized.upload.mimeTypes);
        }
        if (sanitized.upload.imageSizes && Array.isArray(sanitized.upload.imageSizes)) {
            uploadFields = uploadFields.concat(baseImageUploadFields_1.default(sanitized.upload.imageSizes));
        }
        uploadFields = mergeBaseFields(sanitized.fields, uploadFields);
        sanitized.fields = [
            ...uploadFields,
            ...sanitized.fields,
        ];
    }
    if (sanitized.auth) {
        sanitized.auth = deepmerge_1.default(defaults_1.authDefaults, typeof sanitized.auth === 'object' ? sanitized.auth : {});
        let authFields = baseAuthFields_1.default;
        if (sanitized.auth.useAPIKey) {
            authFields = authFields.concat(baseAPIKeyFields_1.default);
        }
        if (sanitized.auth.verify) {
            if (sanitized.auth.verify === true)
                sanitized.auth.verify = {};
            authFields = authFields.concat(baseVerificationFields_1.default);
        }
        if (sanitized.auth.maxLoginAttempts > 0) {
            authFields = authFields.concat(baseAccountLockFields_1.default);
        }
        authFields = mergeBaseFields(sanitized.fields, authFields);
        sanitized.fields = [
            ...authFields,
            ...sanitized.fields,
        ];
    }
    // /////////////////////////////////
    // Sanitize fields
    // /////////////////////////////////
    const validRelationships = collections.map((c) => c.slug);
    sanitized.fields = sanitize_1.default(sanitized.fields, validRelationships);
    return sanitized;
};
exports.default = sanitizeCollection;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29sbGVjdGlvbnMvY29uZmlnL3Nhbml0aXplLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMERBQThCO0FBRTlCLDRFQUEwRDtBQUMxRCw4RUFBc0Q7QUFDdEQsNEZBQW9FO0FBQ3BFLGdHQUF3RTtBQUN4RSw0R0FBb0Y7QUFDcEYsMEdBQWtGO0FBQ2xGLGdHQUF3RTtBQUN4RSwwR0FBa0Y7QUFDbEYsK0RBQTREO0FBQzVELHlDQUFvRDtBQUNwRCxpRkFBOEU7QUFFOUUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLEVBQUU7SUFDN0MsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBRXhCLElBQUksTUFBTSxFQUFFO1FBQ1YsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQy9CLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQztZQUV4QixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyQyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssU0FBUyxDQUFDLElBQUksRUFBRTtvQkFDakMsWUFBWSxHQUFHLENBQUMsQ0FBQztvQkFDakIsT0FBTyxJQUFJLENBQUM7aUJBQ2I7Z0JBRUQsT0FBTyxLQUFLLENBQUM7WUFDZixDQUFDLENBQUMsQ0FBQztZQUVILElBQUksS0FBSyxFQUFFO2dCQUNULE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztnQkFDL0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBRS9CLElBQUksV0FBVyxHQUFHO29CQUNoQixHQUFHLFNBQVM7b0JBQ1osR0FBRyxTQUFTO2lCQUNiLENBQUM7Z0JBRUYsSUFBSSxTQUFTLENBQUMsTUFBTSxJ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