"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mongoose_1 = __importDefault(require("mongoose"));
const express_1 = __importDefault(require("express"));
const passport_1 = __importDefault(require("passport"));
const passport_local_mongoose_1 = __importDefault(require("passport-local-mongoose"));
const passport_local_1 = __importDefault(require("passport-local"));
const apiKey_1 = __importDefault(require("../auth/strategies/apiKey"));
const buildSchema_1 = __importDefault(require("./buildSchema"));
const bindCollection_1 = __importDefault(require("./bindCollection"));
const LocalStrategy = passport_local_1.default.Strategy;
function registerCollections(ctx) {
    ctx.config.collections = ctx.config.collections.map((collection) => {
        const formattedCollection = collection;
        const schema = buildSchema_1.default(formattedCollection, ctx.config);
        if (collection.auth) {
            schema.plugin(passport_local_mongoose_1.default, {
                usernameField: 'email',
            });
            const { maxLoginAttempts, lockTime } = collection.auth;
            if (maxLoginAttempts > 0) {
                // eslint-disable-next-line func-names
                schema.methods.incLoginAttempts = function (cb) {
                    // Expired lock, restart count at 1
                    if (this.lockUntil && this.lockUntil < Date.now()) {
                        return this.updateOne({
                            $set: { loginAttempts: 1 },
                            $unset: { lockUntil: 1 },
                        }, cb);
                    }
                    const updates = { $inc: { loginAttempts: 1 } };
                    // Lock the account if at max attempts and not already locked
                    if (this.loginAttempts + 1 >= maxLoginAttempts && !this.isLocked) {
                        updates.$set = { lockUntil: Date.now() + lockTime };
                    }
                    return this.updateOne(updates, cb);
                };
                // eslint-disable-next-line func-names
                schema.methods.resetLoginAttempts = function (cb) {
                    return this.updateOne({
                        $set: { loginAttempts: 0 },
                        $unset: { lockUntil: 1 },
                    }, cb);
                };
            }
        }
        ctx.collections[formattedCollection.slug] = {
            Model: mongoose_1.default.model(formattedCollection.slug, schema),
            config: formattedCollection,
        };
        // If not local, open routes
        if (!ctx.local) {
            const router = express_1.default.Router();
            const { slug } = collection;
            router.all(`/${slug}*`, bindCollection_1.default(ctx.collections[formattedCollection.slug]));
            const { create, find, update, findByID, delete: deleteHandler, } = ctx.requestHandlers.collections;
            if (collection.auth) {
                const AuthCollection = ctx.collections[formattedCollection.slug];
                passport_1.default.use(new LocalStrategy(AuthCollection.Model.authenticate()));
                if (collection.auth.useAPIKey) {
                    passport_1.default.use(`${AuthCollection.config.slug}-api-key`, apiKey_1.default(ctx, AuthCollection));
                }
                const { init, login, logout, refresh, me, registerFirstUser, forgotPassword, resetPassword, verifyEmail, unlock, } = ctx.requestHandlers.collections.auth;
                if (collection.auth.verify) {
                    router
                        .route(`/${slug}/verify/:token`)
                        .post(verifyEmail);
                }
                if (collection.auth.maxLoginAttempts > 0) {
                    router
                        .route(`/${slug}/unlock`)
                        .post(unlock);
                }
                router
                    .route(`/${slug}/init`)
                    .get(init);
                router
                    .route(`/${slug}/login`)
                    .post(login);
                router
                    .route(`/${slug}/logout`)
                    .post(logout);
                router
                    .route(`/${slug}/refresh-token`)
                    .post(refresh);
                router
                    .route(`/${slug}/me`)
                    .get(me);
                router
                    .route(`/${slug}/first-register`)
                    .post(registerFirstUser);
                router
                    .route(`/${slug}/forgot-password`)
                    .post(forgotPassword);
                router
                    .route(`/${slug}/reset-password`)
                    .post(resetPassword);
            }
            router.route(`/${slug}`)
                .get(find)
                .post(create);
            router.route(`/${slug}/:id`)
                .put(update)
                .get(findByID)
                .delete(deleteHandler);
            ctx.router.use(router);
        }
        return formattedCollection;
    });
}
exports.default = registerCollections;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5pdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb2xsZWN0aW9ucy9pbml0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsd0RBQWdDO0FBQ2hDLHNEQUE4QjtBQUM5Qix3REFBZ0M7QUFDaEMsc0ZBQTREO0FBQzVELG9FQUFzQztBQUV0Qyx1RUFBdUQ7QUFDdkQsZ0VBQXdDO0FBQ3hDLHNFQUF3RDtBQUl4RCxNQUFNLGFBQWEsR0FBRyx3QkFBUSxDQUFDLFFBQVEsQ0FBQztBQUV4QyxTQUF3QixtQkFBbUIsQ0FBQyxHQUFZO0lBQ3RELEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQXFDLEVBQUUsRUFBRTtRQUM1RixNQUFNLG1CQUFtQixHQUFHLFVBQVUsQ0FBQztRQUV2QyxNQUFNLE1BQU0sR0FBRyxxQkFBVyxDQUFDLG1CQUFtQixFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUU1RCxJQUFJLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFDbkIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxpQ0FBcUIsRUFBRTtnQkFDbkMsYUFBYSxFQUFFLE9BQU87YUFDdkIsQ0FBQyxDQUFDO1lBR0gsTUFBTSxFQUFFLGdCQUFnQixFQUFFLFFBQVEsRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7WUFFdkQsSUFBSSxnQkFBZ0IsR0FBRyxDQUFDLEVBQUU7Z0JBT3hCLHNDQUFzQztnQkFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsR0FBRyxVQUFzRCxFQUFFO29CQUN4RixtQ0FBbUM7b0JBQ25DLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFBRTt3QkFDakQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDOzRCQUNwQixJQUFJLEVBQUUsRUFB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