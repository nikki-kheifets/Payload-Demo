"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp_1 = __importDefault(require("mkdirp"));
const path_1 = __importDefault(require("path"));
const crypto_1 = __importDefault(require("crypto"));
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const sanitizeInternalFields_1 = __importDefault(require("../../utilities/sanitizeInternalFields"));
const errors_1 = require("../../errors");
const imageResizer_1 = __importDefault(require("../../uploads/imageResizer"));
const getSafeFilename_1 = __importDefault(require("../../uploads/getSafeFilename"));
const getImageSize_1 = __importDefault(require("../../uploads/getImageSize"));
const isImage_1 = __importDefault(require("../../uploads/isImage"));
const sendVerificationEmail_1 = __importDefault(require("../../auth/sendVerificationEmail"));
const saveBufferToFile_1 = __importDefault(require("../../uploads/saveBufferToFile"));
async function create(incomingArgs) {
    const { config, emailOptions } = this;
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {
        await priorHook;
        args = (await hook({
            args,
            operation: 'create',
        })) || args;
    }, Promise.resolve());
    const { collection: { Model, config: collectionConfig, }, req, disableVerificationEmail, depth, overrideAccess, showHiddenFields, } = args;
    let { data } = args;
    // /////////////////////////////////////
    // Access
    // /////////////////////////////////////
    if (!overrideAccess) {
        await executeAccess_1.default({ req }, collectionConfig.access.create);
    }
    // /////////////////////////////////////
    // Upload and resize potential files
    // /////////////////////////////////////
    if (collectionConfig.upload) {
        const fileData = {};
        const { staticDir, imageSizes, disableLocalStorage } = collectionConfig.upload;
        const file = ((req.files && req.files.file) ? req.files.file : req.file);
        if (!file) {
            throw new errors_1.MissingFile();
        }
        let staticPath = staticDir;
        if (staticDir.indexOf('/') !== 0) {
            staticPath = path_1.default.join(config.paths.configDir, staticDir);
        }
        if (!disableLocalStorage) {
            mkdirp_1.default.sync(staticPath);
        }
        const fsSafeName = await getSafeFilename_1.default(staticPath, file.name);
        try {
            if (!disableLocalStorage) {
                await saveBufferToFile_1.default(file.data, `${staticPath}/${fsSafeName}`);
            }
            if (isImage_1.default(file.mimetype)) {
                const dimensions = await getImageSize_1.default(file);
                fileData.width = dimensions.width;
                fileData.height = dimensions.height;
                if (Array.isArray(imageSizes) && file.mimetype !== 'image/svg+xml') {
                    req.payloadUploadSizes = {};
                    fileData.sizes = await imageResizer_1.default(req, file.data, dimensions, staticPath, collectionConfig, fsSafeName, fileData.mimeType);
                }
            }
        }
        catch (err) {
            console.error(err);
            throw new errors_1.FileUploadError();
        }
        fileData.filename = fsSafeName;
        fileData.filesize = file.size;
        fileData.mimeType = file.mimetype;
        data = {
            ...data,
            ...fileData,
        };
    }
    // /////////////////////////////////////
    // beforeValidate - Fields
    // /////////////////////////////////////
    data = await this.performFieldOperations(collectionConfig, {
        data,
        req,
        hook: 'beforeValidate',
        operation: 'create',
        overrideAccess,
    });
    // /////////////////////////////////////
    // beforeValidate - Collections
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'create',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'create',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Fields
    // /////////////////////////////////////
    const resultWithLocales = await this.performFieldOperations(collectionConfig, {
        data,
        hook: 'beforeChange',
        operation: 'create',
        req,
        overrideAccess,
        unflattenLocales: true,
    });
    // /////////////////////////////////////
    // Create
    // /////////////////////////////////////
    let doc;
    if (collectionConfig.auth) {
        if (data.email) {
            resultWithLocales.email = data.email.toLowerCase();
        }
        if (collectionConfig.auth.verify) {
            resultWithLocales._verified = false;
            resultWithLocales._verificationToken = crypto_1.default.randomBytes(20).toString('hex');
        }
        try {
            doc = await Model.register(resultWithLocales, data.password);
        }
        catch (error) {
            // Handle user already exists from passport-local-mongoose
            if (error.name === 'UserExistsError') {
                throw new errors_1.ValidationError([{ message: error.message, field: 'email' }]);
            }
            throw error;
        }
    }
    else {
        try {
            doc = await Model.create(resultWithLocales);
        }
        catch (error) {
            // Handle uniqueness error from MongoDB
            throw error.code === 11000
                ? new errors_1.ValidationError([{ message: 'Value must be unique', field: Object.keys(error.keyValue)[0] }])
                : error;
        }
    }
    let result = doc.toJSON({ virtuals: true });
    const verificationToken = result._verificationToken;
    result = JSON.stringify(result);
    result = JSON.parse(result);
    result = sanitizeInternalFields_1.default(result);
    // /////////////////////////////////////
    // afterChange - Fields
    // /////////////////////////////////////
    result = await this.performFieldOperations(collectionConfig, {
        data: result,
        hook: 'afterChange',
        operation: 'create',
        req,
        depth,
        overrideAccess,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            doc: result,
            req: args.req,
            operation: 'create',
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Send verification email if applicable
    // /////////////////////////////////////
    if (collectionConfig.auth && collectionConfig.auth.verify) {
        sendVerificationEmail_1.default({
            emailOptions,
            config: this.config,
            sendEmail: this.sendEmail,
            collection: { config: collectionConfig, Model },
            user: result,
            token: verificationToken,
            req,
            disableEmail: disableVerificationEmail,
        });
    }
    // /////////////////////////////////////
    // afterRead - Fields
    // /////////////////////////////////////
    result = await this.performFieldOperations(collectionConfig, {
        depth,
        req,
        data: result,
        hook: 'afterRead',
        operation: 'create',
        overrideAccess,
        flattenLocales: true,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterRead - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            req,
            doc: result,
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Return results
    // /////////////////////////////////////
    return result;
}
exports.default = create;
//# sourceMappingURL=data:application/json;base64,