"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const http_status_1 = __importDefault(require("http-status"));
const path_1 = __importDefault(require("path"));
const sanitizeInternalFields_1 = __importDefault(require("../../utilities/sanitizeInternalFields"));
const executeAccess_1 = __importDefault(require("../../auth/executeAccess"));
const errors_1 = require("../../errors");
const isImage_1 = __importDefault(require("../../uploads/isImage"));
const getImageSize_1 = __importDefault(require("../../uploads/getImageSize"));
const getSafeFilename_1 = __importDefault(require("../../uploads/getSafeFilename"));
const imageResizer_1 = __importDefault(require("../../uploads/imageResizer"));
const types_1 = require("../../auth/types");
const saveBufferToFile_1 = __importDefault(require("../../uploads/saveBufferToFile"));
async function update(incomingArgs) {
    const { performFieldOperations, config } = this;
    let args = incomingArgs;
    // /////////////////////////////////////
    // beforeOperation - Collection
    // /////////////////////////////////////
    await args.collection.config.hooks.beforeOperation.reduce(async (priorHook, hook) => {
        await priorHook;
        args = (await hook({
            args,
            operation: 'update',
        })) || args;
    }, Promise.resolve());
    const { depth, collection: { Model, config: collectionConfig, }, id, req, req: { locale, }, overrideAccess, showHiddenFields, } = args;
    if (!id) {
        throw new errors_1.APIError('Missing ID of document to update.', http_status_1.default.BAD_REQUEST);
    }
    // /////////////////////////////////////
    // Access
    // /////////////////////////////////////
    const accessResults = !overrideAccess ? await executeAccess_1.default({ req, id }, collectionConfig.access.update) : true;
    const hasWherePolicy = types_1.hasWhereAccessResult(accessResults);
    // /////////////////////////////////////
    // Retrieve document
    // /////////////////////////////////////
    const queryToBuild = {
        where: {
            and: [
                {
                    id: {
                        equals: id,
                    },
                },
            ],
        },
    };
    if (types_1.hasWhereAccessResult(accessResults)) {
        queryToBuild.where.and.push(accessResults);
    }
    const query = await Model.buildQuery(queryToBuild, locale);
    const doc = await Model.findOne(query);
    if (!doc && !hasWherePolicy)
        throw new errors_1.NotFound();
    if (!doc && hasWherePolicy)
        throw new errors_1.Forbidden();
    let docWithLocales = doc.toJSON({ virtuals: true });
    docWithLocales = JSON.stringify(docWithLocales);
    docWithLocales = JSON.parse(docWithLocales);
    const originalDoc = await performFieldOperations(collectionConfig, {
        depth: 0,
        req,
        data: docWithLocales,
        hook: 'afterRead',
        operation: 'update',
        overrideAccess,
        flattenLocales: true,
        showHiddenFields,
    });
    let { data } = args;
    // /////////////////////////////////////
    // Upload and resize potential files
    // /////////////////////////////////////
    if (collectionConfig.upload) {
        const fileData = {};
        const { staticDir, imageSizes, disableLocalStorage } = collectionConfig.upload;
        let staticPath = staticDir;
        if (staticDir.indexOf('/') !== 0) {
            staticPath = path_1.default.join(config.paths.configDir, staticDir);
        }
        const file = ((req.files && req.files.file) ? req.files.file : req.file);
        if (file) {
            const fsSafeName = await getSafeFilename_1.default(staticPath, file.name);
            try {
                if (!disableLocalStorage) {
                    await saveBufferToFile_1.default(file.data, `${staticPath}/${fsSafeName}`);
                }
                fileData.filename = fsSafeName;
                fileData.filesize = file.size;
                fileData.mimeType = file.mimetype;
                if (isImage_1.default(file.mimetype)) {
                    const dimensions = await getImageSize_1.default(file);
                    fileData.width = dimensions.width;
                    fileData.height = dimensions.height;
                    if (Array.isArray(imageSizes) && file.mimetype !== 'image/svg+xml') {
                        req.payloadUploadSizes = {};
                        fileData.sizes = await imageResizer_1.default(req, file.data, dimensions, staticPath, collectionConfig, fsSafeName, fileData.mimeType);
                    }
                }
            }
            catch (err) {
                console.error(err);
                throw new errors_1.FileUploadError();
            }
            data = {
                ...data,
                ...fileData,
            };
        }
        else if (data.file === null) {
            data = {
                ...data,
                filename: null,
                sizes: null,
            };
        }
    }
    // /////////////////////////////////////
    // beforeValidate - Fields
    // /////////////////////////////////////
    data = await performFieldOperations(collectionConfig, {
        data,
        req,
        id,
        originalDoc,
        hook: 'beforeValidate',
        operation: 'update',
        overrideAccess,
    });
    // // /////////////////////////////////////
    // // beforeValidate - Collection
    // // /////////////////////////////////////
    await collectionConfig.hooks.beforeValidate.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            operation: 'update',
            originalDoc,
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.beforeChange.reduce(async (priorHook, hook) => {
        await priorHook;
        data = (await hook({
            data,
            req,
            originalDoc,
            operation: 'update',
        })) || data;
    }, Promise.resolve());
    // /////////////////////////////////////
    // beforeChange - Fields
    // /////////////////////////////////////
    let result = await performFieldOperations(collectionConfig, {
        data,
        req,
        id,
        originalDoc,
        hook: 'beforeChange',
        operation: 'update',
        overrideAccess,
        unflattenLocales: true,
        docWithLocales,
    });
    // /////////////////////////////////////
    // Handle potential password update
    // /////////////////////////////////////
    const { password } = data;
    if (password) {
        await doc.setPassword(password);
        await doc.save();
        delete data.password;
        delete result.password;
    }
    // /////////////////////////////////////
    // Update
    // /////////////////////////////////////
    try {
        result = await Model.findByIdAndUpdate({ _id: id }, result, { new: true });
    }
    catch (error) {
        // Handle uniqueness error from MongoDB
        throw error.code === 11000
            ? new errors_1.ValidationError([{ message: 'Value must be unique', field: Object.keys(error.keyValue)[0] }])
            : error;
    }
    result = result.toJSON({ virtuals: true });
    result = JSON.stringify(result);
    result = JSON.parse(result);
    result = sanitizeInternalFields_1.default(result);
    // /////////////////////////////////////
    // afterRead - Fields
    // /////////////////////////////////////
    result = await performFieldOperations(collectionConfig, {
        depth,
        req,
        data: result,
        hook: 'afterRead',
        operation: 'update',
        overrideAccess,
        flattenLocales: true,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterRead - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterRead.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            req,
            doc: result,
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // afterChange - Fields
    // /////////////////////////////////////
    result = await performFieldOperations(collectionConfig, {
        data: result,
        hook: 'afterChange',
        operation: 'update',
        req,
        id,
        depth,
        overrideAccess,
        showHiddenFields,
    });
    // /////////////////////////////////////
    // afterChange - Collection
    // /////////////////////////////////////
    await collectionConfig.hooks.afterChange.reduce(async (priorHook, hook) => {
        await priorHook;
        result = await hook({
            doc: result,
            req,
            operation: 'update',
        }) || result;
    }, Promise.resolve());
    // /////////////////////////////////////
    // Return results
    // /////////////////////////////////////
    return result;
}
exports.default = update;
//# sourceMappingURL=data:application/json;base64,