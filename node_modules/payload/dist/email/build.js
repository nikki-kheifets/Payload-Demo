"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const nodemailer_1 = __importDefault(require("nodemailer"));
const types_1 = require("../config/types");
const errors_1 = require("../errors");
const mockHandler_1 = __importDefault(require("./mockHandler"));
const logger_1 = __importDefault(require("../utilities/logger"));
const logger = logger_1.default();
async function handleTransport(transport, email) {
    try {
        await transport.verify();
    }
    catch (err) {
        logger.error('There is an error with the email configuration you have provided.', err);
    }
    return { ...email, transport };
}
const ensureConfigHasFrom = (emailConfig) => {
    if (!emailConfig.fromName || !emailConfig.fromAddress) {
        throw new errors_1.InvalidConfiguration('Email fromName and fromAddress must be configured when transport is configured');
    }
};
const handleMockAccount = async (emailConfig) => {
    let mockAccount;
    try {
        mockAccount = await mockHandler_1.default(emailConfig);
        const { account: { web, user, pass } } = mockAccount;
        logger.info('E-mail configured with mock configuration');
        logger.info(`Log into mock email provider at ${web}`);
        logger.info(`Mock email account username: ${user}`);
        logger.info(`Mock email account password: ${pass}`);
    }
    catch (err) {
        logger.error('There was a problem setting up the mock email handler', err);
    }
    return mockAccount;
};
async function buildEmail(emailConfig) {
    if (types_1.hasTransport(emailConfig) && emailConfig.transport) {
        ensureConfigHasFrom(emailConfig);
        const email = { ...emailConfig };
        const { transport } = emailConfig;
        return handleTransport(transport, email);
    }
    if (types_1.hasTransportOptions(emailConfig) && emailConfig.transportOptions) {
        ensureConfigHasFrom(emailConfig);
        const email = { ...emailConfig };
        const transport = nodemailer_1.default.createTransport(emailConfig.transportOptions);
        return handleTransport(transport, email);
    }
    return handleMockAccount(emailConfig);
}
exports.default = buildEmail;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW1haWwvYnVpbGQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0REFBcUQ7QUFDckQsMkNBQWtHO0FBQ2xHLHNDQUFpRDtBQUNqRCxnRUFBd0M7QUFDeEMsaUVBQXlDO0FBR3pDLE1BQU0sTUFBTSxHQUFHLGdCQUFNLEVBQUUsQ0FBQztBQUV4QixLQUFLLFVBQVUsZUFBZSxDQUFDLFNBQXNCLEVBQUUsS0FBcUI7SUFDMUUsSUFBSTtRQUNGLE1BQU0sU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDO0tBQzFCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLENBQUMsS0FBSyxDQUNWLG1FQUFtRSxFQUNuRSxHQUFHLENBQ0osQ0FBQztLQUNIO0lBRUQsT0FBTyxFQUFFLEdBQUcsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFDO0FBQ2pDLENBQUM7QUFFRCxNQUFNLG1CQUFtQixHQUFHLENBQUMsV0FBVyxFQUFFLEVBQUU7SUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFO1FBQ3JELE1BQU0sSUFBSSw2QkFBb0IsQ0FBQyxnRkFBZ0YsQ0FBQyxDQUFDO0tBQ2xIO0FBQ0gsQ0FBQyxDQUFDO0FBRUYsTUFBTSxpQkFBaUIsR0FBRyxLQUFLLEVBQUUsV0FBeUIsRUFBRSxFQUFFO0lBQzVELElBQUksV0FBVyxDQUFDO0lBQ2hCLElBQUk7UUFDRixXQUFXLEdBQUcsTUFBTSxxQkFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUcsV0FBVyxDQUFDO1FBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3RELE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0NBQWdDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDcEQsTUFBTSxDQUFDLElBQUksQ0FBQyxnQ0FBZ0MsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNyRDtJQUFDLE9BQU8sR0FBRyxFQUFFO1FBQ1osTUFBTSxDQUFDLEtBQUssQ0FDVix1REFBdUQsRUFDdkQsR0FBRyxDQUNKLENBQUM7S0FDSDtJQUNELE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUVhLEtBQUssVUFBVSxVQUFVLENBQUMsV0FBeUI7SUFDaEUsSUFBSSxvQkFBWSxDQUFDLFdBQVcsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUU7UUFDdEQsbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDakMsTUFBTSxLQUFLLEdBQUcsRUFBRSxHQUFHLFdBQVcsRUFBRSxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBOEIsV0FBVyxDQUFDO1FBQzdELE9BQU8sZUFBZSxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztLQUMxQztJQUVELElBQUksMkJBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksV0FBVyxDQUFDLGdCQUFnQixFQUFFO1FBQ3BFLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2pDLE1BQU0sS0FBSyxHQUFHLEVBQUUsR0FBRyxXQUFXLEVBQW9CLENBQUM7UUFDbkQsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDM0UsT0FBTyxlQUFlLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0tBQzFDO0lBRUQsT0FBTyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBaEJELDZCQWdCQyJ9