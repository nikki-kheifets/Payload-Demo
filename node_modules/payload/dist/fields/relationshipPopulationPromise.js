"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const executeAccess_1 = __importDefault(require("../auth/executeAccess"));
const types_1 = require("./config/types");
const populate = async ({ depth, currentDepth, req, overrideAccess, dataReference, data, field, index, id, payload, }) => {
    const dataToUpdate = dataReference;
    const fieldAsRelationship = field;
    const relation = Array.isArray(fieldAsRelationship.relationTo) ? data.relationTo : fieldAsRelationship.relationTo;
    const relatedCollection = payload.collections[relation];
    if (relatedCollection) {
        const accessResult = !overrideAccess ? await executeAccess_1.default({ req, disableErrors: true, id }, relatedCollection.config.access.read) : true;
        let populatedRelationship = null;
        if (accessResult && (depth && currentDepth <= depth)) {
            let idString = Array.isArray(fieldAsRelationship.relationTo) ? data.value : data;
            if (typeof idString !== 'string' && typeof (idString === null || idString === void 0 ? void 0 : idString.toString) === 'function') {
                idString = idString.toString();
            }
            populatedRelationship = await payload.operations.collections.findByID({
                req,
                collection: relatedCollection,
                id: idString,
                currentDepth: currentDepth + 1,
                overrideAccess,
                disableErrors: true,
                depth,
            });
        }
        // If access control fails, update value to null
        // If populatedRelationship comes back, update value
        if (!accessResult || populatedRelationship) {
            if (typeof index === 'number') {
                if (Array.isArray(fieldAsRelationship.relationTo)) {
                    dataToUpdate[field.name][index].value = populatedRelationship;
                }
                else {
                    dataToUpdate[field.name][index] = populatedRelationship;
                }
            }
            else if (Array.isArray(fieldAsRelationship.relationTo)) {
                dataToUpdate[field.name].value = populatedRelationship;
            }
            else {
                dataToUpdate[field.name] = populatedRelationship;
            }
        }
    }
};
const relationshipPopulationPromise = ({ data, field, depth, currentDepth, req, overrideAccess, payload, }) => async () => {
    const resultingData = data;
    const populateDepth = types_1.fieldHasMaxDepth(field) && field.maxDepth < depth ? field.maxDepth : depth;
    if (types_1.fieldSupportsMany(field) && field.hasMany && Array.isArray(data[field.name])) {
        const rowPromises = [];
        data[field.name].forEach((relatedDoc, index) => {
            const rowPromise = async () => {
                if (relatedDoc) {
                    await populate({
                        depth: populateDepth,
                        currentDepth,
                        req,
                        overrideAccess,
                        data: relatedDoc,
                        dataReference: resultingData,
                        field,
                        index,
                        payload,
                    });
                }
            };
            rowPromises.push(rowPromise());
        });
        await Promise.all(rowPromises);
    }
    else if (data[field.name]) {
        await populate({
            depth: populateDepth,
            currentDepth,
            req,
            overrideAccess,
            dataReference: resultingData,
            data: data[field.name],
            field,
            payload,
        });
    }
};
exports.default = relationshipPopulationPromise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVsYXRpb25zaGlwUG9wdWxhdGlvblByb21pc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZmllbGRzL3JlbGF0aW9uc2hpcFBvcHVsYXRpb25Qcm9taXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMEVBQWtEO0FBQ2xELDBDQUErRjtBQWdCL0YsTUFBTSxRQUFRLEdBQUcsS0FBSyxFQUFFLEVBQ3RCLEtBQUssRUFDTCxZQUFZLEVBQ1osR0FBRyxFQUNILGNBQWMsRUFDZCxhQUFhLEVBQ2IsSUFBSSxFQUNKLEtBQUssRUFDTCxLQUFLLEVBQ0wsRUFBRSxFQUNGLE9BQU8sR0FDTSxFQUFFLEVBQUU7SUFDakIsTUFBTSxZQUFZLEdBQUcsYUFBYSxDQUFDO0lBRW5DLE1BQU0sbUJBQW1CLEdBQUcsS0FBMEIsQ0FBQztJQUN2RCxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBRSxJQUFJLENBQUMsVUFBcUIsQ0FBQyxDQUFDLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDO0lBQzlILE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV4RCxJQUFJLGlCQUFpQixFQUFFO1FBQ3JCLE1BQU0sWUFBWSxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxNQUFNLHVCQUFhLENBQUMsRUFBRSxHQUFHLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFFMUksSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUM7UUFFakMsSUFBSSxZQUFZLElBQUksQ0FBQyxLQUFLLElBQUksWUFBWSxJQUFJLEtBQUssQ0FBQyxFQUFFO1lBQ3BELElBQUksUUFB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