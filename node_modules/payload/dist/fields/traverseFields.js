"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const validationPromise_1 = __importDefault(require("./validationPromise"));
const accessPromise_1 = __importDefault(require("./accessPromise"));
const hookPromise_1 = __importDefault(require("./hookPromise"));
const types_1 = require("./config/types");
const richTextRelationshipPromise_1 = __importDefault(require("./richTextRelationshipPromise"));
const traverseFields = (args) => {
    const { fields, data = {}, originalDoc = {}, path, flattenLocales, locale, fallbackLocale, accessPromises, operation, overrideAccess, req, id, relationshipPopulations, depth, currentDepth, hook, hookPromises, fullOriginalDoc, fullData, validationPromises, errors, payload, showHiddenFields, unflattenLocaleActions, unflattenLocales, docWithLocales = {}, skipValidation, } = args;
    fields.forEach((field) => {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        const dataCopy = data;
        if (hook === 'afterRead' && field.hidden && typeof data[field.name] !== 'undefined' && !showHiddenFields) {
            delete data[field.name];
        }
        if ((field.type === 'upload' || field.type === 'relationship')
            && (data[field.name] === '' || data[field.name] === 'none' || data[field.name] === 'null')) {
            dataCopy[field.name] = null;
        }
        if (field.type === 'relationship' && field.hasMany && (((_a = data[field.name]) === null || _a === void 0 ? void 0 : _a[0]) === '' || ((_b = data[field.name]) === null || _b === void 0 ? void 0 : _b[0]) === 'none' || ((_c = data[field.name]) === null || _c === void 0 ? void 0 : _c[0]) === 'null')) {
            dataCopy[field.name] = [];
        }
        if (field.type === 'number' && typeof data[field.name] === 'string') {
            dataCopy[field.name] = parseFloat(data[field.name]);
        }
        if (field.type === 'checkbox') {
            if (data[field.name] === 'true')
                dataCopy[field.name] = true;
            if (data[field.name] === 'false')
                dataCopy[field.name] = false;
            if (data[field.name] === '')
                dataCopy[field.name] = false;
        }
        if (field.type === 'richText') {
            if (typeof data[field.name] === 'string') {
                try {
                    const richTextJSON = JSON.parse(data[field.name]);
                    dataCopy[field.name] = richTextJSON;
                }
                catch {
                    // Disregard this data as it is not valid.
                    // Will be reported to user by field validation
                }
            }
            if ((((_e = (_d = field.admin) === null || _d === void 0 ? void 0 : _d.elements) === null || _e === void 0 ? void 0 : _e.includes('relationship')) || !((_f = field === null || field === void 0 ? void 0 : field.admin) === null || _f === void 0 ? void 0 : _f.elements)) && hook === 'afterRead') {
                relationshipPopulations.push(richTextRelationshipPromise_1.default({
                    req,
                    data,
                    payload,
                    overrideAccess,
                    depth,
                    field,
                    currentDepth,
                }));
            }
        }
        const hasLocalizedValue = (typeof (data === null || data === void 0 ? void 0 : data[field.name]) === 'object' && (data === null || data === void 0 ? void 0 : data[field.name]) !== null)
            && field.name
            && field.localized
            && locale !== 'all'
            && flattenLocales;
        if (hasLocalizedValue) {
            let localizedValue = data[field.name][locale];
            if (typeof localizedValue === 'undefined' && fallbackLocale)
                localizedValue = data[field.name][fallbackLocale];
            if (typeof localizedValue === 'undefined')
                localizedValue = null;
            dataCopy[field.name] = localizedValue;
        }
        if (field.localized && unflattenLocales) {
            unflattenLocaleActions.push(() => {
                const localeData = payload.config.localization.locales.reduce((locales, localeID) => {
                    var _a, _b, _c;
                    let valueToSet;
                    if (localeID === locale) {
                        if (data[field.name]) {
                            valueToSet = data[field.name];
                        }
                        else if ((_a = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _a === void 0 ? void 0 : _a[localeID]) {
                            valueToSet = (_b = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _b === void 0 ? void 0 : _b[localeID];
                        }
                    }
                    else {
                        valueToSet = (_c = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _c === void 0 ? void 0 : _c[localeID];
                    }
                    if (valueToSet) {
                        return {
                            ...locales,
                            [localeID]: valueToSet,
                        };
                    }
                    return locales;
                }, {});
                // If there are locales with data, set the data
                if (Object.keys(localeData).length > 0) {
                    data[field.name] = localeData;
                }
            });
        }
        accessPromises.push(accessPromise_1.default({
            data,
            fullData,
            originalDoc,
            field,
            operation,
            overrideAccess,
            req,
            id,
            relationshipPopulations,
            depth,
            currentDepth,
            hook,
            payload,
        }));
        hookPromises.push(hookPromise_1.default({
            data,
            field,
            hook,
            req,
            operation,
            fullOriginalDoc,
            fullData,
        }));
        const passesCondition = (((_g = field.admin) === null || _g === void 0 ? void 0 : _g.condition) && hook === 'beforeChange') ? field.admin.condition(fullData, data) : true;
        const skipValidationFromHere = skipValidation || !passesCondition;
        if (types_1.fieldHasSubFields(field)) {
            if (field.name === undefined) {
                traverseFields({
                    ...args,
                    fields: field.fields,
                    skipValidation: skipValidationFromHere,
                });
            }
            else if (types_1.fieldIsArrayType(field)) {
                if (Array.isArray(data[field.name])) {
                    for (let i = 0; i < data[field.name].length; i += 1) {
                        if (typeof (data[field.name][i]) === 'undefined') {
                            data[field.name][i] = {};
                        }
                        traverseFields({
                            ...args,
                            fields: field.fields,
                            data: data[field.name][i] || {},
                            originalDoc: (_h = originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === null || _h === void 0 ? void 0 : _h[i],
                            docWithLocales: (_j = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _j === void 0 ? void 0 : _j[i],
                            path: `${path}${field.name}.${i}.`,
                            skipValidation: skipValidationFromHere,
                        });
                    }
                }
            }
            else {
                traverseFields({
                    ...args,
                    fields: field.fields,
                    data: data[field.name],
                    originalDoc: originalDoc[field.name],
                    docWithLocales: docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name],
                    path: `${path}${field.name}.`,
                    skipValidation: skipValidationFromHere,
                });
            }
        }
        if (types_1.fieldIsBlockType(field)) {
            if (Array.isArray(data[field.name])) {
                data[field.name].forEach((rowData, i) => {
                    var _a, _b;
                    const block = field.blocks.find((blockType) => blockType.slug === rowData.blockType);
                    if (block) {
                        traverseFields({
                            ...args,
                            fields: block.fields,
                            data: rowData || {},
                            originalDoc: (_a = originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === null || _a === void 0 ? void 0 : _a[i],
                            docWithLocales: (_b = docWithLocales === null || docWithLocales === void 0 ? void 0 : docWithLocales[field.name]) === null || _b === void 0 ? void 0 : _b[i],
                            path: `${path}${field.name}.${i}.`,
                            skipValidation: skipValidationFromHere,
                        });
                    }
                });
            }
        }
        if (hook === 'beforeChange' && field.name) {
            const updatedData = data;
            if ((data === null || data === void 0 ? void 0 : data[field.name]) === undefined && (originalDoc === null || originalDoc === void 0 ? void 0 : originalDoc[field.name]) === undefined && field.defaultValue) {
                updatedData[field.name] = field.defaultValue;
            }
            if (field.type === 'array' || field.type === 'blocks') {
                const hasRowsOfNewData = Array.isArray(data[field.name]);
                const newRowCount = hasRowsOfNewData ? data[field.name].length : 0;
                // Handle cases of arrays being intentionally set to 0
                if (data[field.name] === '0' || data[field.name] === 0 || data[field.name] === null) {
                    updatedData[field.name] = [];
                }
                const hasRowsOfExistingData = Array.isArray(originalDoc[field.name]);
                const existingRowCount = hasRowsOfExistingData ? originalDoc[field.name].length : 0;
                validationPromises.push(() => validationPromise_1.default({
                    errors,
                    hook,
                    newData: { [field.name]: newRowCount },
                    existingData: { [field.name]: existingRowCount },
                    field,
                    path,
                    skipValidation: skipValidationFromHere,
                }));
            }
            else {
                validationPromises.push(() => validationPromise_1.default({
                    errors,
                    hook,
                    newData: data,
                    existingData: originalDoc,
                    field,
                    path,
                    skipValidation: skipValidationFromHere,
                }));
            }
        }
    });
};
exports.default = traverseFields;
//# sourceMappingURL=data:application/json;base64,