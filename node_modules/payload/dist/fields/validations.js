"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blocks = exports.radio = exports.select = exports.array = exports.relationship = exports.upload = exports.date = exports.checkbox = exports.richText = exports.code = exports.wysiwyg = exports.textarea = exports.email = exports.password = exports.text = exports.number = void 0;
const defaultValue_1 = __importDefault(require("./richText/defaultValue"));
const defaultMessage = 'This field is required.';
const number = (value, options = {}) => {
    const parsedValue = parseInt(value, 10);
    if ((value && typeof parsedValue !== 'number') || (options.required && Number.isNaN(parsedValue))) {
        return 'Please enter a valid number.';
    }
    if (options.max && parsedValue > options.max) {
        return `"${value}" is greater than the max allowed value of ${options.max}.`;
    }
    if (options.min && parsedValue < options.min) {
        return `"${value}" is less than the min allowed value of ${options.min}.`;
    }
    if (options.required && typeof parsedValue !== 'number') {
        return defaultMessage;
    }
    return true;
};
exports.number = number;
const text = (value, options = {}) => {
    if (value && options.maxLength && value.length > options.maxLength) {
        return `This value must be shorter than the max length of ${options.maxLength} characters.`;
    }
    if (value && options.minLength && (value === null || value === void 0 ? void 0 : value.length) < options.minLength) {
        return `This value must be longer than the minimum length of ${options.minLength} characters.`;
    }
    if (options.required) {
        if (typeof value !== 'string' || (typeof value === 'string' && (value === null || value === void 0 ? void 0 : value.length) === 0)) {
            return defaultMessage;
        }
    }
    return true;
};
exports.text = text;
const password = (value, options = {}) => {
    if (value && options.maxLength && value.length > options.maxLength) {
        return `This value must be shorter than the max length of ${options.maxLength} characters.`;
    }
    if (value && options.minLength && value.length < options.minLength) {
        return `This value must be longer than the minimum length of ${options.minLength} characters.`;
    }
    if (options.required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.password = password;
const email = (value, options = {}) => {
    if ((value && !/\S+@\S+\.\S+/.test(value))
        || (!value && options.required)) {
        return 'Please enter a valid email address.';
    }
    return true;
};
exports.email = email;
const textarea = (value, options = {}) => {
    if (value && options.maxLength && value.length > options.maxLength) {
        return `This value must be shorter than the max length of ${options.maxLength} characters.`;
    }
    if (value && options.minLength && value.length < options.minLength) {
        return `This value must be longer than the minimum length of ${options.minLength} characters.`;
    }
    if (options.required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.textarea = textarea;
const wysiwyg = (value, options = {}) => {
    if (options.required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.wysiwyg = wysiwyg;
const code = (value, options = {}) => {
    if (options.required && value === undefined) {
        return defaultMessage;
    }
    return true;
};
exports.code = code;
const richText = (value, options = {}) => {
    if (options.required) {
        const stringifiedDefaultValue = JSON.stringify(defaultValue_1.default);
        if (value && JSON.stringify(value) !== stringifiedDefaultValue)
            return true;
        return 'This field is required.';
    }
    return true;
};
exports.richText = richText;
const checkbox = (value, options = {}) => {
    if ((value && typeof value !== 'boolean')
        || (options.required && typeof value !== 'boolean')) {
        return 'This field can only be equal to true or false.';
    }
    return true;
};
exports.checkbox = checkbox;
const date = (value, options = {}) => {
    if (value && !isNaN(Date.parse(value.toString()))) { /* eslint-disable-line */
        return true;
    }
    if (value) {
        return `"${value}" is not a valid date.`;
    }
    if (options.required) {
        return defaultMessage;
    }
    return true;
};
exports.date = date;
const upload = (value, options = {}) => {
    if (value || !options.required)
        return true;
    return defaultMessage;
};
exports.upload = upload;
const relationship = (value, options = {}) => {
    if (value || !options.required)
        return true;
    return defaultMessage;
};
exports.relationship = relationship;
const array = (value, options = {}) => {
    if (options.minRows && value < options.minRows) {
        return `This field requires at least ${options.minRows} row(s).`;
    }
    if (options.maxRows && value > options.maxRows) {
        return `This field requires no more than ${options.maxRows} row(s).`;
    }
    if (!value && options.required) {
        return 'This field requires at least one row.';
    }
    return true;
};
exports.array = array;
const select = (value, options = {}) => {
    if (Array.isArray(value) && value.find((input) => !options.options.find((option) => (option === input || option.value === input)))) {
        return 'This field has an invalid selection';
    }
    if (typeof value === 'string' && !options.options.find((option) => (option === value || option.value === value))) {
        return 'This field has an invalid selection';
    }
    if (options.required && !value) {
        return defaultMessage;
    }
    return true;
};
exports.select = select;
const radio = (value, options = {}) => {
    const stringValue = String(value);
    if ((typeof value !== 'undefined' || !options.required) && (options.options.find((option) => String(option.value) === stringValue)))
        return true;
    return defaultMessage;
};
exports.radio = radio;
const blocks = (value, options = {}) => {
    if (options.minRows && value < options.minRows) {
        return `This field requires at least ${options.minRows} row(s).`;
    }
    if (options.maxRows && value > options.maxRows) {
        return `This field requires no more than ${options.maxRows} row(s).`;
    }
    if (!value && options.required) {
        return 'This field requires at least one row.';
    }
    return true;
};
exports.blocks = blocks;
exports.default = {
    number: exports.number,
    text: exports.text,
    password: exports.password,
    email: exports.email,
    textarea: exports.textarea,
    code: exports.code,
    wysiwyg: exports.wysiwyg,
    richText: exports.richText,
    checkbox: exports.checkbox,
    date: exports.date,
    upload: exports.upload,
    relationship: exports.relationship,
    array: exports.array,
    select: exports.select,
    radio: exports.radio,
    blocks: exports.blocks,
};
//# sourceMappingURL=data:application/json;base64,