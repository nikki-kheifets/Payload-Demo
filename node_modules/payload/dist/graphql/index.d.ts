/// <reference types="node" />
import * as GraphQL from 'graphql';
import { GraphQLError, GraphQLFormattedError } from 'graphql';
import buildObjectType from './schema/buildObjectType';
import buildMutationInputType from './schema/buildMutationInputType';
import buildBlockType from './schema/buildBlockType';
import buildPoliciesType from './schema/buildPoliciesType';
import initCollections from '../collections/graphql/init';
import initGlobals from '../globals/graphql/init';
import initPreferences from '../preferences/graphql/init';
import { GraphQLResolvers } from './bindResolvers';
import { SanitizedConfig } from '../config/types';
declare type GraphQLTypes = {
    blockTypes: any;
    blockInputTypes: any;
    localeInputType: any;
    fallbackLocaleInputType: any;
};
declare class InitializeGraphQL {
    types: GraphQLTypes;
    config: SanitizedConfig;
    graphQL: {
        resolvers: GraphQLResolvers;
    };
    Query: {
        name: string;
        fields: {
            [key: string]: any;
        };
    };
    Mutation: {
        name: string;
        fields: {
            [key: string]: any;
        };
    };
    buildBlockType: typeof buildBlockType;
    buildMutationInputType: typeof buildMutationInputType;
    buildWhereInputType: (name: any, fields: any, parentName: any) => GraphQL.GraphQLInputObjectType;
    buildObjectType: typeof buildObjectType;
    buildPoliciesType: typeof buildPoliciesType;
    initCollections: typeof initCollections;
    initGlobals: typeof initGlobals;
    initPreferences: typeof initPreferences;
    schema: GraphQL.GraphQLSchema;
    extensions: (info: any) => Promise<any>;
    customFormatErrorFn: (error: GraphQLError) => GraphQLFormattedError;
    validationRules: any;
    errorResponse: any;
    constructor(init: any);
    init(req: any, res: any): (request: import("http").IncomingMessage & {
        url: string;
    }, response: import("http").ServerResponse & {
        json?: (data: unknown) => void;
    }) => Promise<void>;
}
export default InitializeGraphQL;
