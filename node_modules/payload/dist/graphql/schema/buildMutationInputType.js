"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-use-before-define */
const graphql_1 = require("graphql");
const graphql_type_json_1 = require("graphql-type-json");
const withNullableType_1 = __importDefault(require("./withNullableType"));
const formatName_1 = __importDefault(require("../utilities/formatName"));
const combineParentName_1 = __importDefault(require("../utilities/combineParentName"));
const formatLabels_1 = require("../../utilities/formatLabels");
function buildMutationInputType(name, fields, parentName, forceNullable = false) {
    const fieldToSchemaMap = {
        number: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLFloat, forceNullable) }),
        text: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        email: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        textarea: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        richText: (field) => ({ type: withNullableType_1.default(field, graphql_type_json_1.GraphQLJSON, forceNullable) }),
        code: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        date: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        upload: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        'rich-text': (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        html: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        radio: (field) => ({ type: withNullableType_1.default(field, graphql_1.GraphQLString, forceNullable) }),
        checkbox: () => ({ type: graphql_1.GraphQLBoolean }),
        select: (field) => {
            const formattedName = `${combineParentName_1.default(parentName, field.name)}_MutationInput`;
            let type = new graphql_1.GraphQLEnumType({
                name: formattedName,
                values: field.options.reduce((values, option) => {
                    if (typeof option === 'object' && option.value) {
                        return {
                            ...values,
                            [formatName_1.default(option.value)]: {
                                value: option.value,
                            },
                        };
                    }
                    if (typeof option === 'string') {
                        return {
                            ...values,
                            [option]: {
                                value: option,
                            },
                        };
                    }
                    return values;
                }, {}),
            });
            type = field.hasMany ? new graphql_1.GraphQLList(type) : type;
            type = withNullableType_1.default(field, type, forceNullable);
            return { type };
        },
        relationship: (field) => {
            const { relationTo } = field;
            let type = graphql_1.GraphQLString;
            if (Array.isArray(relationTo)) {
                const fullName = `${combineParentName_1.default(parentName, field.label === false ? formatLabels_1.toWords(field.name, true) : field.label)}RelationshipInput`;
                type = new graphql_1.GraphQLInputObjectType({
                    name: fullName,
                    fields: {
                        relationTo: {
                            type: new graphql_1.GraphQLEnumType({
                                name: `${fullName}RelationTo`,
                                values: relationTo.reduce((values, option) => ({
                                    ...values,
                                    [formatName_1.default(option)]: {
                                        value: option,
                                    },
                                }), {}),
                            }),
                        },
                        value: { type: graphql_1.GraphQLString },
                    },
                });
            }
            return { type: field.hasMany ? new graphql_1.GraphQLList(type) : type };
        },
        array: (field) => {
            const fullName = combineParentName_1.default(parentName, field.label === false ? formatLabels_1.toWords(field.name, true) : field.label);
            let type = buildMutationInputType(fullName, field.fields, fullName);
            type = new graphql_1.GraphQLList(withNullableType_1.default(field, type, forceNullable));
            return { type };
        },
        group: (field) => {
            const requiresAtLeastOneField = field.fields.some((subField) => (subField.required && !subField.localized));
            const fullName = combineParentName_1.default(parentName, field.label === false ? formatLabels_1.toWords(field.name, true) : field.label);
            let type = buildMutationInputType(fullName, field.fields, fullName);
            if (requiresAtLeastOneField)
                type = new graphql_1.GraphQLNonNull(type);
            return { type };
        },
        blocks: () => ({ type: graphql_type_json_1.GraphQLJSON }),
        row: (field) => field.fields.reduce((acc, rowField) => {
            const getFieldSchema = fieldToSchemaMap[rowField.type];
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema(rowField);
                return [
                    ...acc,
                    fieldSchema,
                ];
            }
            return null;
        }, []),
    };
    const fieldTypes = fields.reduce((schema, field) => {
        if (!field.hidden) {
            const getFieldSchema = fieldToSchemaMap[field.type];
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema(field);
                if (Array.isArray(fieldSchema)) {
                    return fieldSchema.reduce((acc, subField, i) => ({
                        ...acc,
                        [field.fields[i].name]: subField,
                    }), schema);
                }
                return {
                    ...schema,
                    [field.name]: fieldSchema,
                };
            }
        }
        return schema;
    }, {});
    const fieldName = formatName_1.default(name);
    return new graphql_1.GraphQLInputObjectType({
        name: `mutation${fieldName}Input`,
        fields: {
            ...fieldTypes,
        },
    });
}
exports.default = buildMutationInputType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRNdXRhdGlvbklucHV0VHlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ncmFwaHFsL3NjaGVtYS9idWlsZE11dGF0aW9uSW5wdXRUeXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEseUNBQXlDO0FBQ3pDLHFDQVVpQjtBQUNqQix5REFBZ0Q7QUFDaEQsMEVBQWtEO0FBQ2xELHlFQUFpRDtBQUNqRCx1RkFBK0Q7QUFFL0QsK0RBQXVEO0FBRXZELFNBQVMsc0JBQXNCLENBQUMsSUFBWSxFQUFFLE1BQWUsRUFBRSxVQUFrQixFQUFFLGFBQWEsR0FBRyxLQUFLO0lBQ3RHLE1BQU0sZ0JBQWdCLEdBQUc7UUFDdkIsTUFBTSxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixDQUFDLEtBQUssRUFBRSxzQkFBWSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDMUYsSUFBSSxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixDQUFDLEtBQUssRUFBRSx1QkFBYSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDekYsS0FBSyxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixDQUFDLEtBQUssRUFBRSx1QkFBYSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDMUYsUUFBUSxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixDQUFDLEtBQUssRUFBRSx1QkFBYSxFQUFFLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDN0YsUUFBUSxFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLDBCQUFnQixDQUFDLEtBQUssRUFBRSwrQkFBVyxFQUFFLGFBQWEsQ0FB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