"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const graphql_type_json_1 = require("graphql-type-json");
const graphql_1 = require("graphql");
const formatName_1 = __importDefault(require("../utilities/formatName"));
const buildFields = (label, fieldsToBuild) => fieldsToBuild.reduce((builtFields, field) => {
    if (!field.hidden) {
        if (field.name) {
            const fieldName = formatName_1.default(field.name);
            const objectTypeFields = ['create', 'read', 'update', 'delete'].reduce((operations, operation) => {
                const capitalizedOperation = operation.charAt(0).toUpperCase() + operation.slice(1);
                return {
                    ...operations,
                    [operation]: {
                        type: new graphql_1.GraphQLObjectType({
                            name: `${label}_${fieldName}_${capitalizedOperation}`,
                            fields: {
                                permission: {
                                    type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
                                },
                            },
                        }),
                    },
                };
            }, {});
            if (field.fields) {
                objectTypeFields.fields = {
                    type: new graphql_1.GraphQLObjectType({
                        name: `${label}_${fieldName}_Fields`,
                        fields: buildFields(`${label}_${fieldName}`, field.fields),
                    }),
                };
            }
            return {
                ...builtFields,
                [field.name]: {
                    type: new graphql_1.GraphQLObjectType({
                        name: `${label}_${fieldName}`,
                        fields: objectTypeFields,
                    }),
                },
            };
        }
        if (!field.name && field.fields) {
            const subFields = buildFields(label, field.fields);
            return {
                ...builtFields,
                ...subFields,
            };
        }
    }
    return builtFields;
}, {});
const buildEntity = (label, entityFields, operations) => {
    const formattedLabel = formatName_1.default(label);
    const fields = {
        fields: {
            type: new graphql_1.GraphQLObjectType({
                name: formatName_1.default(`${formattedLabel}Fields`),
                fields: buildFields(`${formattedLabel}Fields`, entityFields),
            }),
        },
    };
    operations.forEach((operation) => {
        const capitalizedOperation = operation.charAt(0).toUpperCase() + operation.slice(1);
        fields[operation] = {
            type: new graphql_1.GraphQLObjectType({
                name: `${formattedLabel}${capitalizedOperation}Access`,
                fields: {
                    permission: { type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean) },
                    where: { type: graphql_type_json_1.GraphQLJSONObject },
                },
            }),
        };
    });
    return fields;
};
function buildPoliciesType() {
    const fields = {
        canAccessAdmin: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLBoolean),
        },
    };
    Object.values(this.config.collections).forEach((collection) => {
        fields[formatName_1.default(collection.slug)] = {
            type: new graphql_1.GraphQLObjectType({
                name: formatName_1.default(`${collection.labels.singular}Access`),
                fields: buildEntity(collection.labels.singular, collection.fields, ['create', 'read', 'update', 'delete']),
            }),
        };
    });
    Object.values(this.config.globals).forEach((global) => {
        fields[formatName_1.default(global.slug)] = {
            type: new graphql_1.GraphQLObjectType({
                name: formatName_1.default(`${global.label}Access`),
                fields: buildEntity(global.label, global.fields, ['read', 'update']),
            }),
        };
    });
    return new graphql_1.GraphQLObjectType({
        name: 'Access',
        fields,
    });
}
exports.default = buildPoliciesType;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRQb2xpY2llc1R5cGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvZ3JhcGhxbC9zY2hlbWEvYnVpbGRQb2xpY2llc1R5cGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSx5REFBc0Q7QUFDdEQscUNBQTRFO0FBQzVFLHlFQUFpRDtBQVdqRCxNQUFNLFdBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxXQUFXLEVBQUUsS0FBSyxFQUFFLEVBQUU7SUFDeEYsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDakIsSUFBSSxLQUFLLENBQUMsSUFBSSxFQUFFO1lBQ2QsTUFBTSxTQUFTLEdBQUcsb0JBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFekMsTUFBTSxnQkFBZ0IsR0FBcUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxFQUFFLEVBQUU7Z0JBQ2pILE1BQU0sb0JBQW9CLEdBQUcsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUVwRixPQUFPO29CQUNMLEdBQUcsVUFBVTtvQkFDYixDQUFDLFNBQVMsQ0FBQyxFQUFFO3dCQUNYLElBQUksRUFBRSxJQUFJLDJCQUFpQixDQUFDOzRCQUMxQixJQUFJLEVBQUUsR0FBRyxLQUFLLElBQUksU0FBUyxJQUFJLG9CQUFvQixFQUFFOzRCQUNyRCxNQUFNLEVBQUU7Z0NBQ04sVUFBVSxFQUFFO29DQUNWLElBQUksRUFBRSxJQUFJLHdCQUFjLENBQUMsd0JBQWMsQ0FBQztpQ0FDekM7NkJBQ0Y7eUJBQ0YsQ0FBQztxQkFDSDtpQkFDRixDQUFDO1lBQ0osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRVAsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNoQixnQkFBZ0IsQ0FBQyxNQUFNLEdBQUc7b0JBQ3hCLElBQUksRUFBRSxJQUFJLDJCQUFpQixDQUFDO3dCQUMxQixJQUFJLEVBQUUsR0FBRyxLQUFLLElBQUksU0FBUyxTQUFTO3dCQUNwQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEdBQUcsS0FBSyxJQUFJLFNBQVMsRUFBRSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUM7cUJBQzNELENBQUM7aUJBQ0gsQ0FBQzthQUNIO1lBRUQsT0FBTztnQkFDTCxHQUFHLFdBQVc7Z0JBQ2QsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7b0JBQ1osSUFBSSxFQUFFLElBQUksMkJBQWlCLENBQUM7d0JBQzFCLElBQUksRUFBRSxHQUFHLEtBQUssSUFBSSxTQUFTLEVBQUU7d0JBQzdCLE1BQU0sRUFBRSxnQkFBZ0I7cUJBQ3pCLENBQUM7aUJBQ0g7YUFDRixDQUFDO1NBQ0g7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQy9CLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRW5ELE9BQU87Z0JBQ0wsR0FBRyxXQUFXO2dCQUNkLEdBQUcsU0FBUzthQUNiLENBQUM7U0FDSDtLQUNGO0lBQ0QsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0FBRVAsTUFBTSxXQUFXLEdBQUcsQ0FBQyxLQUFhLEVBQUUsWUFBcUIsRUFBRSxVQUEyQixFQUFFLEVBQUU7SUFDeEYsTUFBTSxjQUFjLEdBQUcsb0JBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUV6QyxNQUFNLE1BQU0sR0FBRztRQUNiLE1BQU0sRUFBRTtZQUNOLElBQUksRUFBRSxJQUFJLDJCQUFpQixDQUFDO2dCQUMxQixJQUFJLEVBQUUsb0JBQVUsQ0FBQyxHQUFHLGNBQWMsUUFBUSxDQUFDO2dCQUMzQyxNQUFNLEVBQUUsV0FBVyxDQUFDLEdBQUcsY0FBYyxRQUFRLEVBQUUsWUFBWSxDQUFDO2FBQzdELENBQUM7U0FDSDtLQUNGLENBQUM7SUFFRixVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7UUFDL0IsTUFBTSxvQkFBb0IsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFcEYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHO1lBQ2xCLElBQUksRUFBRSxJQUFJLDJCQUFpQixDQUFDO2dCQUMxQixJQUFJLEVBQUUsR0FBRyxjQUFjLEdBQUcsb0JBQW9CLFFBQVE7Z0JBQ3RELE1BQU0sRUFBRTtvQkFDTixVQUFVLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSx3QkFBYyxDQUFDLHdCQUFjLENBQUMsRUFBRTtvQkFDeEQsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLHFDQUFpQixFQUFFO2lCQUNuQzthQUNGLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixTQUF3QixpQkFBaUI7SUFDdkMsTUFBTSxNQUFNLEdBQUc7UUFDYixjQUFjLEVBQUU7WUFDZCxJQUFJLEVBQUUsSUFBSSx3QkFBYyxDQUFDLHdCQUFjLENBQUM7U0FDekM7S0FDRixDQUFDO0lBRUYsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFVBQXFDLEVBQUUsRUFBRTtRQUN2RixNQUFNLENBQUMsb0JBQVUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRztZQUNwQyxJQUFJLEVBQUUsSUFBSSwyQkFBaUIsQ0FBQztnQkFDMUIsSUFBSSxFQUFFLG9CQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFFBQVEsUUFBUSxDQUFDO2dCQUN2RCxNQUFNLEVBQUUsV0FBVyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLENBQUMsQ0FBQzthQUMzRyxDQUFDO1NBQ0gsQ0FBQztJQUNKLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQTZCLEVBQUUsRUFBRTtRQUMzRSxNQUFNLENBQUMsb0JBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRztZQUNoQyxJQUFJLEVBQUUsSUFBSSwyQkFBaUIsQ0FBQztnQkFDMUIsSUFBSSxFQUFFLG9CQUFVLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxRQUFRLENBQUM7Z0JBQ3pDLE1BQU0sRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO2FBQ3JFLENBQUM7U0FDSCxDQUFDO0lBQ0osQ0FBQyxDQUFDLENBQUM7SUFFSCxPQUFPLElBQUksMkJBQWlCLENBQUM7UUFDM0IsSUFBSSxFQUFFLFFBQVE7UUFDZCxNQUFNO0tBQ1AsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQTdCRCxvQ0E2QkMifQ==