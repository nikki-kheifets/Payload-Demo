"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-use-before-define */
const graphql_1 = require("graphql");
const graphql_type_json_1 = require("graphql-type-json");
const graphql_scalars_1 = require("graphql-scalars");
const types_1 = require("../../fields/config/types");
const formatName_1 = __importDefault(require("../utilities/formatName"));
const combineParentName_1 = __importDefault(require("../utilities/combineParentName"));
const withOperators_1 = __importDefault(require("./withOperators"));
// buildWhereInputType is similar to buildObjectType and operates
// on a field basis with a few distinct differences.
//
// 1. Everything needs to be a GraphQLInputObjectType or scalar / enum
// 2. Relationships, groups, repeaters and flex content are not
//    directly searchable. Instead, we need to build a chained pathname
//    using dot notation so Mongo can properly search nested paths.
const buildWhereInputType = (name, fields, parentName) => {
    // This is the function that builds nested paths for all
    // field types with nested paths.
    const recursivelyBuildNestedPaths = (field) => {
        const nestedPaths = field.fields.reduce((nestedFields, nestedField) => {
            const getFieldSchema = fieldToSchemaMap[nestedField.type];
            const nestedFieldName = `${field.name}__${nestedField.name}`;
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema({
                    ...nestedField,
                    name: nestedFieldName,
                });
                if (Array.isArray(fieldSchema)) {
                    return [
                        ...nestedFields,
                        ...fieldSchema,
                    ];
                }
                return [
                    ...nestedFields,
                    {
                        key: nestedFieldName,
                        type: fieldSchema,
                    },
                ];
            }
            return nestedFields;
        }, []);
        return nestedPaths;
    };
    const operators = {
        equality: ['equals', 'not_equals'],
        contains: ['in', 'not_in', 'all'],
        comparison: ['greater_than_equal', 'greater_than', 'less_than_equal', 'less_than'],
    };
    const fieldToSchemaMap = {
        number: (field) => {
            const type = graphql_1.GraphQLFloat;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, ...operators.comparison]),
            };
        },
        text: (field) => {
            const type = graphql_1.GraphQLString;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, 'like']),
            };
        },
        email: (field) => {
            const type = graphql_scalars_1.EmailAddressResolver;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, 'like']),
            };
        },
        textarea: (field) => {
            const type = graphql_1.GraphQLString;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, 'like']),
            };
        },
        richText: (field) => {
            const type = graphql_type_json_1.GraphQLJSON;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, 'like']),
            };
        },
        code: (field) => {
            const type = graphql_1.GraphQLString;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, 'like']),
            };
        },
        radio: (field) => ({
            type: withOperators_1.default(field, new graphql_1.GraphQLEnumType({
                name: `${combineParentName_1.default(parentName, field.name)}_Input`,
                values: field.options.reduce((values, option) => {
                    if (types_1.optionIsObject(option)) {
                        return {
                            ...values,
                            [formatName_1.default(option.value)]: {
                                value: option.value,
                            },
                        };
                    }
                    return {
                        ...values,
                        [formatName_1.default(option)]: {
                            value: option,
                        },
                    };
                }, {}),
            }), parentName, [...operators.equality, 'like']),
        }),
        date: (field) => {
            const type = graphql_scalars_1.DateTimeResolver;
            return {
                type: withOperators_1.default(field, type, parentName, [...operators.equality, ...operators.comparison, 'like']),
            };
        },
        relationship: (field) => {
            let type = withOperators_1.default(field, graphql_1.GraphQLString, parentName, [...operators.equality, ...operators.contains]);
            if (Array.isArray(field.relationTo)) {
                type = new graphql_1.GraphQLInputObjectType({
                    name: `${combineParentName_1.default(parentName, field.name)}_Relation`,
                    fields: {
                        relationTo: {
                            type: new graphql_1.GraphQLEnumType({
                                name: `${combineParentName_1.default(parentName, field.name)}_Relation_RelationTo`,
                                values: field.relationTo.reduce((values, relation) => ({
                                    ...values,
                                    [formatName_1.default(relation)]: {
                                        value: relation,
                                    },
                                }), {}),
                            }),
                        },
                        value: { type: graphql_1.GraphQLString },
                    },
                });
            }
            if (field.hasMany) {
                return {
                    type: new graphql_1.GraphQLList(type),
                };
            }
            return { type };
        },
        upload: (field) => ({
            type: withOperators_1.default(field, graphql_1.GraphQLString, parentName, [...operators.equality]),
        }),
        checkbox: (field) => ({
            type: withOperators_1.default(field, graphql_1.GraphQLBoolean, parentName, [...operators.equality]),
        }),
        select: (field) => ({
            type: withOperators_1.default(field, new graphql_1.GraphQLEnumType({
                name: `${combineParentName_1.default(parentName, field.name)}_Input`,
                values: field.options.reduce((values, option) => {
                    if (typeof option === 'object' && option.value) {
                        return {
                            ...values,
                            [formatName_1.default(option.value)]: {
                                value: option.value,
                            },
                        };
                    }
                    if (typeof option === 'string') {
                        return {
                            ...values,
                            [option]: {
                                value: option,
                            },
                        };
                    }
                    return values;
                }, {}),
            }), parentName, [...operators.equality, ...operators.contains]),
        }),
        array: (field) => recursivelyBuildNestedPaths(field),
        group: (field) => recursivelyBuildNestedPaths(field),
        row: (field) => field.fields.reduce((rowSchema, rowField) => {
            const getFieldSchema = fieldToSchemaMap[rowField.type];
            if (getFieldSchema) {
                const rowFieldSchema = getFieldSchema(rowField);
                if (Array.isArray(rowFieldSchema)) {
                    return [
                        ...rowSchema,
                        ...rowFieldSchema,
                    ];
                }
                return [
                    ...rowSchema,
                    {
                        key: rowField.name,
                        type: rowFieldSchema,
                    },
                ];
            }
            return rowSchema;
        }, []),
    };
    const fieldTypes = fields.reduce((schema, field) => {
        if (!field.hidden) {
            const getFieldSchema = fieldToSchemaMap[field.type];
            if (getFieldSchema) {
                const fieldSchema = getFieldSchema(field);
                if (Array.isArray(fieldSchema)) {
                    return {
                        ...schema,
                        ...(fieldSchema.reduce((subFields, subField) => ({
                            ...subFields,
                            [formatName_1.default(subField.key)]: subField.type,
                        }), {})),
                    };
                }
                return {
                    ...schema,
                    [formatName_1.default(field.name)]: fieldSchema,
                };
            }
        }
        return schema;
    }, {});
    fieldTypes.id = {
        type: withOperators_1.default({ name: 'id' }, graphql_1.GraphQLString, parentName, [...operators.equality, ...operators.contains]),
    };
    const fieldName = formatName_1.default(name);
    return new graphql_1.GraphQLInputObjectType({
        name: `${fieldName}_where`,
        fields: {
            ...fieldTypes,
            OR: {
                type: new graphql_1.GraphQLList(new graphql_1.GraphQLInputObjectType({
                    name: `${fieldName}_where_or`,
                    fields: {
                        ...fieldTypes,
                    },
                })),
            },
            AND: {
                type: new graphql_1.GraphQLList(new graphql_1.GraphQLInputObjectType({
                    name: `${fieldName}_where_and`,
                    fields: {
                        ...fieldTypes,
                    },
                })),
            },
            page: { type: graphql_1.GraphQLInt },
            limit: { type: graphql_1.GraphQLInt },
            sort: { type: graphql_1.GraphQLString },
        },
    });
};
exports.default = buildWhereInputType;
//# sourceMappingURL=data:application/json;base64,