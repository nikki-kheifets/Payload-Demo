"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable no-use-before-define */
const mongoose_1 = require("mongoose");
const setBlockDiscriminators = (fields, schema, config) => {
    fields.forEach((field) => {
        const blockFieldType = field;
        if (blockFieldType.type === 'blocks' && blockFieldType.blocks && blockFieldType.blocks.length > 0) {
            blockFieldType.blocks.forEach((blockItem) => {
                let blockSchemaFields = {};
                blockItem.fields.forEach((blockField) => {
                    const fieldSchema = fieldToSchemaMap[blockField.type];
                    if (fieldSchema) {
                        blockSchemaFields = fieldSchema(blockField, blockSchemaFields, config);
                    }
                });
                const blockSchema = new mongoose_1.Schema(blockSchemaFields, { _id: false, id: false });
                if (field.localized) {
                    config.localization.locales.forEach((locale) => {
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore Possible incorrect typing in mongoose types, this works
                        schema.path(`${field.name}.${locale}`).discriminator(blockItem.slug, blockSchema);
                        setBlockDiscriminators(blockItem.fields, blockSchema, config);
                    });
                }
                else {
                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                    // @ts-ignore Possible incorrect typing in mongoose types, this works
                    schema.path(field.name).discriminator(blockItem.slug, blockSchema);
                    setBlockDiscriminators(blockItem.fields, blockSchema, config);
                }
            });
        }
    });
};
const formatBaseSchema = (field) => {
    var _a, _b;
    return ({
        sparse: field.unique && field.localized,
        unique: field.unique || false,
        required: (field.required && !field.localized && !((_a = field === null || field === void 0 ? void 0 : field.admin) === null || _a === void 0 ? void 0 : _a.condition) && !((_b = field === null || field === void 0 ? void 0 : field.access) === null || _b === void 0 ? void 0 : _b.create)) || false,
        default: field.defaultValue || undefined,
        index: field.index || field.unique || false,
    });
};
const buildSchema = (config, configFields, options = {}) => {
    let fields = {};
    configFields.forEach((field) => {
        const fieldSchema = fieldToSchemaMap[field.type];
        if (fieldSchema) {
            fields = fieldSchema(field, fields, config);
        }
    });
    const schema = new mongoose_1.Schema(fields, options);
    setBlockDiscriminators(configFields, schema, config);
    return schema;
};
const fieldToSchemaMap = {
    number: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: Number };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    text: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: String };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    email: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: String };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    textarea: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: String };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    richText: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: mongoose_1.Schema.Types.Mixed };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    code: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: String };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    radio: (field, fields, config) => {
        const baseSchema = {
            ...formatBaseSchema(field),
            type: String,
            enum: field.options.map((option) => {
                if (typeof option === 'object')
                    return option.value;
                return option;
            }),
        };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    checkbox: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: Boolean };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    date: (field, fields, config) => {
        const baseSchema = { ...formatBaseSchema(field), type: Date };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    upload: (field, fields, config) => {
        const baseSchema = {
            ...formatBaseSchema(field),
            type: mongoose_1.Schema.Types.ObjectId,
            ref: field.relationTo,
        };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    relationship: (field, fields, config) => {
        const hasManyRelations = Array.isArray(field.relationTo);
        let schemaToReturn = {};
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((locales, locale) => {
                    let localeSchema = {};
                    if (hasManyRelations) {
                        localeSchema._id = false;
                        localeSchema.value = {
                            type: mongoose_1.Schema.Types.ObjectId,
                            refPath: `${field.name}.${locale}.relationTo`,
                        };
                        localeSchema.relationTo = { type: String, enum: field.relationTo };
                    }
                    else {
                        localeSchema = {
                            ...formatBaseSchema(field),
                            type: mongoose_1.Schema.Types.ObjectId,
                            ref: field.relationTo,
                        };
                    }
                    return {
                        ...locales,
                        [locale]: field.hasMany ? [localeSchema] : localeSchema,
                    };
                }, {}),
                localized: true,
            };
        }
        else if (hasManyRelations) {
            schemaToReturn._id = false;
            schemaToReturn.value = {
                type: mongoose_1.Schema.Types.ObjectId,
                refPath: `${field.name}.relationTo`,
            };
            schemaToReturn.relationTo = { type: String, enum: field.relationTo };
            if (field.hasMany)
                schemaToReturn = [schemaToReturn];
        }
        else {
            schemaToReturn = {
                ...formatBaseSchema(field),
                type: mongoose_1.Schema.Types.ObjectId,
                ref: field.relationTo,
            };
            if (field.hasMany)
                schemaToReturn = [schemaToReturn];
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    row: (field, fields, config) => {
        const newFields = { ...fields };
        field.fields.forEach((rowField) => {
            const fieldSchemaMap = fieldToSchemaMap[rowField.type];
            if (fieldSchemaMap) {
                const fieldSchema = fieldSchemaMap(rowField, fields, config);
                newFields[rowField.name] = fieldSchema[rowField.name];
            }
        });
        return newFields;
    },
    array: (field, fields, config) => {
        const baseSchema = {
            ...formatBaseSchema(field),
            type: [buildSchema(config, field.fields, { _id: false, id: false })],
        };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    group: (field, fields, config) => {
        var _a, _b;
        let { required } = field;
        if (((_a = field === null || field === void 0 ? void 0 : field.admin) === null || _a === void 0 ? void 0 : _a.condition) || (field === null || field === void 0 ? void 0 : field.localized) || ((_b = field === null || field === void 0 ? void 0 : field.access) === null || _b === void 0 ? void 0 : _b.create))
            required = false;
        const baseSchema = {
            ...formatBaseSchema(field),
            required: required && field.fields.some((subField) => { var _a, _b; return (subField.required && !subField.localized && !((_a = subField === null || subField === void 0 ? void 0 : subField.admin) === null || _a === void 0 ? void 0 : _a.condition) && !((_b = subField === null || subField === void 0 ? void 0 : subField.access) === null || _b === void 0 ? void 0 : _b.create)); }),
            type: buildSchema(config, field.fields, { _id: false, id: false }),
        };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    select: (field, fields, config) => {
        const baseSchema = {
            ...formatBaseSchema(field),
            type: String,
            enum: field.options.map((option) => {
                if (typeof option === 'object')
                    return option.value;
                return option;
            }),
        };
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = {
                type: config.localization.locales.reduce((localeSchema, locale) => ({
                    ...localeSchema,
                    [locale]: baseSchema,
                }), {}),
                localized: true,
            };
        }
        else {
            schemaToReturn = baseSchema;
        }
        if (field.hasMany)
            schemaToReturn = [schemaToReturn];
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
    blocks: (field, fields, config) => {
        const baseSchema = [new mongoose_1.Schema({}, { _id: false, discriminatorKey: 'blockType' })];
        let schemaToReturn;
        if (field.localized) {
            schemaToReturn = config.localization.locales.reduce((localeSchema, locale) => ({
                ...localeSchema,
                [locale]: baseSchema,
            }), {});
        }
        else {
            schemaToReturn = baseSchema;
        }
        return {
            ...fields,
            [field.name]: schemaToReturn,
        };
    },
};
exports.default = buildSchema;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRTY2hlbWEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbW9uZ29vc2UvYnVpbGRTY2hlbWEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx5Q0FBeUM7QUFDekMsdUNBQW9EO0FBTXBELE1BQU0sc0JBQXNCLEdBQUcsQ0FBQyxNQUFlLEVBQUUsTUFBYyxFQUFFLE1BQXVCLEVBQUUsRUFBRTtJQUMxRixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDdkIsTUFBTSxjQUFjLEdBQUcsS0FBbUIsQ0FBQztRQUMzQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLGNBQWMsQ0FBQyxNQUFNLElBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2pHLGNBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBZ0IsRUFBRSxFQUFFO2dCQUNqRCxJQUFJLGlCQUFpQixHQUFHLEVBQUUsQ0FBQztnQkFFM0IsU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtvQkFDdEMsTUFBTSxXQUFXLEdBQXlCLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDNUUsSUFBSSxXQUFXLEVBQUU7d0JBQ2YsaUJBQWlCLEdBQUcsV0FBVyxDQUFDLFVBQVUsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztxQkFDeEU7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxpQkFBTSxDQUFDLGlCQUFpQixFQUFFLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQztnQkFFN0UsSUFBSSxLQUFLLENBQUMsU0FBUyxFQUFFO29CQUNuQixNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMs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