"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const sharp_1 = __importDefault(require("sharp"));
const sanitize_filename_1 = __importDefault(require("sanitize-filename"));
const fileExists_1 = __importDefault(require("./fileExists"));
function getOutputImage(sourceImage, size) {
    const extension = sourceImage.split('.').pop();
    const name = sanitize_filename_1.default(sourceImage.substr(0, sourceImage.lastIndexOf('.')) || sourceImage);
    return {
        name,
        extension,
        width: size.width,
        height: size.height,
    };
}
/**
 * @description
 * @param staticPath Path to save images
 * @param config Payload config
 * @param savedFilename
 * @param mimeType
 * @returns image sizes keyed to strings
 */
async function resizeAndSave(req, file, dimensions, staticPath, config, savedFilename, mimeType) {
    const { imageSizes, disableLocalStorage } = config.upload;
    const sizes = imageSizes
        .filter((desiredSize) => desiredSize.width < dimensions.width)
        .map(async (desiredSize) => {
        const resized = await sharp_1.default(file)
            .resize(desiredSize.width, desiredSize.height, {
            position: desiredSize.crop || 'centre',
        });
        const bufferObject = await resized.toBuffer({
            resolveWithObject: true,
        });
        req.payloadUploadSizes[desiredSize.name] = bufferObject.data;
        const outputImage = getOutputImage(savedFilename, desiredSize);
        const imageNameWithDimensions = `${outputImage.name}-${bufferObject.info.width}x${bufferObject.info.height}.${outputImage.extension}`;
        const imagePath = `${staticPath}/${imageNameWithDimensions}`;
        const fileAlreadyExists = await fileExists_1.default(imagePath);
        if (fileAlreadyExists) {
            fs_1.default.unlinkSync(imagePath);
        }
        if (!disableLocalStorage) {
            await resized.toFile(imagePath);
        }
        return {
            name: desiredSize.name,
            width: bufferObject.info.width,
            height: bufferObject.info.height,
            filename: imageNameWithDimensions,
            filesize: bufferObject.info.size,
            mimeType,
        };
    });
    const savedSizes = await Promise.all(sizes);
    return savedSizes.reduce((results, size) => ({
        ...results,
        [size.name]: {
            width: size.width,
            height: size.height,
            filename: size.filename,
            mimeType: size.mimeType,
            filesize: size.filesize,
        },
    }), {});
}
exports.default = resizeAndSave;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VSZXNpemVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3VwbG9hZHMvaW1hZ2VSZXNpemVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLGtEQUEwQjtBQUMxQiwwRUFBeUM7QUFFekMsOERBQXNDO0FBS3RDLFNBQVMsY0FBYyxDQUFDLFdBQW1CLEVBQUUsSUFBZTtJQUMxRCxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQy9DLE1BQU0sSUFBSSxHQUFHLDJCQUFRLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxDQUFDO0lBRTFGLE9BQU87UUFDTCxJQUFJO1FBQ0osU0FBUztRQUNULEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztRQUNqQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07S0FDcEIsQ0FBQztBQUNKLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ1ksS0FBSyxVQUFVLGFBQWEsQ0FDekMsR0FBbUIsRUFDbkIsSUFBWSxFQUNaLFVBQTJCLEVBQzNCLFVBQWtCLEVBQ2xCLE1BQWlDLEVBQ2pDLGFBQXFCLEVBQ3JCLFFBQWdCO0lBRWhCLE1BQU0sRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBRTFELE1BQU0sS0FBSyxHQUFHLFVBQVU7U0FDckIsTUFBTSxDQUFDLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUM7U0FDN0QsR0FBRyxDQUFDLEtBQUssRUFBRSxXQUFXLEVBQUUsRUFBRTtRQUN6QixNQUFNLE9BQU8sR0FBRyxNQUFNLGVBQUssQ0FBQyxJQUFJLENBQUM7YUFDOUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUM3QyxRQUFRLEVBQUUsV0FBVyxDQUFDLElBQUksSUFBSSxRQUFRO1NBQ3ZDLENBQUMsQ0FBQztRQUVMLE1BQU0sWUFBWSxHQUFHLE1BQU0sT0FBTyxDQUFDLFFBQVEsQ0FBQztZQUMxQyxpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCLENBQUMsQ0FBQztRQUVILEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztRQUU3RCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsYUFBYSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQy9ELE1BQU0sdUJBQXVCLEdBQUcsR0FBRyxXQUFXLENBQUMsSUFBSSxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLFdBQVcsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUN0SSxNQUFNLFNBQVMsR0FBRyxHQUFHLFVBQVUsSUFBSSx1QkFBdUIsRUFBRSxDQUFDO1FBQzdELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxvQkFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRXRELElBQUksaUJBQWlCLEVBQUU7WUFDckIsWUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMxQjtRQUVELElBQUksQ0FBQyxtQkFBbUIsRUFBRTtZQUN4QixNQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDakM7UUFFRCxPQUFPO1lBQ0wsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJO1lBQ3RCLEtBQUssRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFDOUIsTUFBTSxFQUFFLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUNoQyxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFFBQVEsRUFBRSxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUk7WUFDaEMsUUFBUTtTQUNULENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVMLE1BQU0sVUFBVSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUU1QyxPQUFPLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzNDLEdBQUcsT0FBTztRQUNWLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ1gsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QjtLQUNGLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNWLENBQUM7QUE1REQsZ0NBNERDIn0=